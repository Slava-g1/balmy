"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedBalanceSource = void 0;
const concurrent_lru_cache_1 = require("../../../shared/concurrent-lru-cache");
class CachedBalanceSource {
    constructor(source, config) {
        this.source = source;
        this.cache = new concurrent_lru_cache_1.ConcurrentLRUCacheWithContext({
            calculate: (config, keysTokenInChain) => this.fetchBalancesForTokens(keysTokenInChain, config),
            config,
        });
    }
    supportedChains() {
        return this.source.supportedChains();
    }
    async getBalances({ tokens, config, }) {
        const keys = tokens.map(({ chainId, account, token }) => toKeyTokenInChain(chainId, account, token));
        const amountsInChain = await this.cache.getOrCalculate({
            keys,
            timeout: config?.timeout,
            context: config,
        });
        const result = {};
        for (const key in amountsInChain) {
            const { chainId, account, token } = fromKeyTokenInChain(key);
            if (!(chainId in result))
                result[chainId] = {};
            if (!(account in result[chainId]))
                result[chainId][account] = {};
            result[chainId][account][token] = amountsInChain[key];
        }
        return result;
    }
    async fetchBalancesForTokens(keys, config) {
        const tokens = keys.map((key) => fromKeyTokenInChain(key));
        const balances = await this.source.getBalances({ tokens, config });
        const result = {};
        for (const key of keys) {
            const { chainId, account, token } = fromKeyTokenInChain(key);
            const balance = balances?.[chainId]?.[account]?.[token];
            if (balance !== undefined) {
                result[key] = balance;
            }
        }
        return result;
    }
}
exports.CachedBalanceSource = CachedBalanceSource;
function toKeyTokenInChain(chainId, account, token) {
    return `${chainId}-${account}-${token}`;
}
function fromKeyTokenInChain(key) {
    const [chainId, account, token] = key.split('-');
    return { chainId: Number(chainId), account, token };
}
//# sourceMappingURL=cached-balance-source.js.map