import { Address, ChainId, TimeString, TokenAddress } from '../../../types';
import { BalanceInput, IBalanceSource } from '../types';
import { IProviderService } from '../../providers/types';
import { ILogsService } from '../../logs';
export type RPCBalanceSourceConfig = {
    batching?: {
        maxSizeInBytes: number;
    };
};
export declare class RPCBalanceSource implements IBalanceSource {
    private readonly providerService;
    private readonly config?;
    private readonly logger;
    constructor(providerService: IProviderService, logs: ILogsService, config?: RPCBalanceSourceConfig | undefined);
    getBalances({ tokens, config, }: {
        tokens: BalanceInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<Address, Record<TokenAddress, bigint>>>>;
    supportedChains(): ChainId[];
    private fetchBalancesInChain;
    private fetchERC20BalancesInChain;
    private fetchNativeBalancesInChain;
    private fetchNativeBalanceInChain;
}
