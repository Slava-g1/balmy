import { Address, ChainId, TimeString, TokenAddress } from '../../types';
import { BalanceInput, IBalanceService, IBalanceSource } from './types';
export declare class BalanceService implements IBalanceService {
    private readonly source;
    constructor(source: IBalanceSource);
    supportedChains(): ChainId[];
    getBalancesForAccountInChain({ chainId, account, tokens, config, }: {
        chainId: ChainId;
        account: Address;
        tokens: TokenAddress[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<TokenAddress, bigint>>;
    getBalancesForAccount({ account, tokens, config, }: {
        account: Address;
        tokens: Omit<BalanceInput, 'account'>[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, bigint>>>;
    getBalancesInChain({ chainId, tokens, config, }: {
        chainId: ChainId;
        tokens: Omit<BalanceInput, 'chainId'>[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<string, Record<string, bigint>>>;
    getBalances({ tokens, config }: {
        tokens: BalanceInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, Record<string, bigint>>>>;
}
