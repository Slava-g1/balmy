"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverridableSourceList = void 0;
class OverridableSourceList {
    constructor({ default: defaultSourceList, overrides }) {
        this.getQuotesOverrides = {};
        this.buildTxsOverrides = {};
        this.defaultSourceList = defaultSourceList;
        for (const { list, sourceIds } of overrides.getQuotes ?? []) {
            for (const sourceId of sourceIds) {
                if (sourceId in this.getQuotesOverrides) {
                    throw new Error(`Source with id ${sourceId} was assigned twice`);
                }
                this.getQuotesOverrides[sourceId] = list;
            }
        }
        for (const { list, sourceIds } of overrides.buildTxs ?? []) {
            for (const sourceId of sourceIds) {
                if (sourceId in this.buildTxsOverrides) {
                    throw new Error(`Source with id ${sourceId} was assigned twice`);
                }
                this.buildTxsOverrides[sourceId] = list;
            }
        }
    }
    supportedSources() {
        const sources = this.defaultSourceList.supportedSources();
        for (const [sourceId, sourceList] of Object.entries(this.getQuotesOverrides)) {
            sources[sourceId] = sourceList.supportedSources()[sourceId];
        }
        for (const [sourceId, sourceList] of Object.entries(this.buildTxsOverrides)) {
            sources[sourceId] = sourceList.supportedSources()[sourceId];
        }
        return sources;
    }
    getQuotes(request) {
        const result = {};
        const sourceListSourcesId = new Map();
        request.sources.forEach((sourceId) => {
            const sourceList = this.getQuotesOverrides[sourceId] ?? this.defaultSourceList;
            if (!sourceListSourcesId.has(sourceList)) {
                sourceListSourcesId.set(sourceList, []);
            }
            sourceListSourcesId.get(sourceList).push(sourceId);
        });
        sourceListSourcesId.forEach((sourceIds, sourceList) => {
            const responses = sourceList.getQuotes({ ...request, sources: sourceIds });
            Object.entries(responses).forEach(([sourceId, response]) => (result[sourceId] = response));
        });
        return result;
    }
    buildTxs(request) {
        const result = {};
        const sourceListSourcesId = new Map();
        Object.entries(request.quotes).forEach(([sourceId, quote]) => {
            const sourceList = this.buildTxsOverrides[sourceId] ?? this.defaultSourceList;
            if (!sourceListSourcesId.has(sourceList)) {
                sourceListSourcesId.set(sourceList, {});
            }
            sourceListSourcesId.get(sourceList)[sourceId] = quote;
        });
        sourceListSourcesId.forEach((quotes, sourceList) => {
            const responses = sourceList.buildTxs({ ...request, quotes });
            Object.entries(responses).forEach(([sourceId, response]) => (result[sourceId] = response));
        });
        return result;
    }
}
exports.OverridableSourceList = OverridableSourceList;
//# sourceMappingURL=overridable-source-list.js.map