import { TimeString } from '../../../types';
import { QuoteResponseRelevantForTxBuild, QuoteTransaction, SourceId, SourceMetadata } from '../types';
import { IQuoteSourceList, SourceListBuildTxRequest, SourceListQuoteRequest, SourceListQuoteResponse } from './types';
import { IFetchService } from '../../fetch/types';
import { SourceConfig } from '../source-registry';
export type URIGenerator<T> = (request: T) => string;
type ConstructorParameters = {
    fetchService: IFetchService;
    getQuotesURI: URIGenerator<BatchAPISourceListQuoteRequest>;
    buildTxURI: URIGenerator<BatchAPISourceListBuildTxRequest>;
    sources: Record<SourceId, SourceMetadata>;
};
export declare class BatchAPISourceList implements IQuoteSourceList {
    private readonly fetchService;
    private readonly getQuotesURI;
    private readonly buildTxURI;
    private readonly sources;
    constructor({ fetchService, getQuotesURI, buildTxURI, sources }: ConstructorParameters);
    supportedSources(): Record<string, SourceMetadata>;
    getQuotes(request: SourceListQuoteRequest): Record<SourceId, Promise<SourceListQuoteResponse>>;
    buildTxs(request: SourceListBuildTxRequest): Record<SourceId, Promise<QuoteTransaction>>;
    private fetchTxs;
}
export type BatchAPISourceListQuoteRequest = Omit<SourceListQuoteRequest, 'external'>;
export type BatchAPISourceListBuildTxRequest = {
    sourceConfig?: SourceConfig;
    quotes: Record<SourceId, QuoteResponseRelevantForTxBuild>;
    quoteTimeout?: TimeString;
};
export {};
