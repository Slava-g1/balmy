"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FailedToGenerateAnyQuotesError = exports.FailedToGenerateQuoteError = exports.SourceInvalidConfigOrContextError = exports.SourceNoBuyOrdersError = exports.SourceNotFoundError = void 0;
const _chains_1 = require("../../chains");
class SourceNotFoundError extends Error {
    constructor(sourceId) {
        super(`Could not find a source with id '${sourceId}'`);
    }
}
exports.SourceNotFoundError = SourceNotFoundError;
class SourceNoBuyOrdersError extends Error {
    constructor(sourceId) {
        super(`Source with id '${sourceId}' does not support buy orders`);
    }
}
exports.SourceNoBuyOrdersError = SourceNoBuyOrdersError;
class SourceInvalidConfigOrContextError extends Error {
    constructor(sourceId) {
        super(`The current context or config is not valid for source with id '${sourceId}'`);
    }
}
exports.SourceInvalidConfigOrContextError = SourceInvalidConfigOrContextError;
class FailedToGenerateQuoteError extends Error {
    constructor(sourceName, chainId, sellToken, buyToken, error) {
        const context = error ? ` with error ${JSON.stringify(error)}` : '';
        const chain = (0, _chains_1.getChainByKey)(chainId)?.name ?? `chain with id ${chainId}`;
        super(`${sourceName}: failed to calculate a quote between ${sellToken} and ${buyToken} on ${chain}${context}`);
    }
}
exports.FailedToGenerateQuoteError = FailedToGenerateQuoteError;
class FailedToGenerateAnyQuotesError extends Error {
    constructor(chainId, sellToken, buyToken) {
        const chain = (0, _chains_1.getChainByKey)(chainId)?.name ?? `chain with id ${chainId}`;
        super(`Failed to calculate a quote between ${sellToken} and ${buyToken} on ${chain}`);
    }
}
exports.FailedToGenerateAnyQuotesError = FailedToGenerateAnyQuotesError;
//# sourceMappingURL=errors.js.map