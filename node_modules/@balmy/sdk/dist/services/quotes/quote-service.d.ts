import { BigIntish, ChainId, SupportInChain, TimeString } from '../../types';
import { FailedResponse, IQuoteService, QuoteRequest, QuoteResponse, IgnoreFailedResponses, SourceId, SourceMetadata, QuoteTransaction, EstimatedQuoteRequest, EstimatedQuoteResponse, QuoteResponseWithTx } from './types';
import { CompareQuotesBy, CompareQuotesUsing } from './quote-compare';
import { IQuoteSourceList } from './source-lists/types';
import { BaseTokenMetadata, IMetadataService } from '../metadata/types';
import { DefaultGasValues, IGasService } from '../gas/types';
import { IPriceService } from '../prices/types';
import { SourceConfig } from './source-registry';
type ConstructorParameters = {
    priceService: IPriceService;
    gasService: IGasService<DefaultGasValues>;
    metadataService: IMetadataService<BaseTokenMetadata>;
    sourceList: IQuoteSourceList;
    defaultConfig: SourceConfig | undefined;
};
export declare class QuoteService implements IQuoteService {
    private readonly priceService;
    private readonly gasService;
    private readonly metadataService;
    private readonly sourceList;
    private readonly defaultConfig;
    constructor({ priceService, gasService, metadataService, sourceList, defaultConfig }: ConstructorParameters);
    supportedSources(): {
        [k: string]: SourceMetadata;
    };
    supportedChains(): number[];
    supportedSourcesInChain({ chainId }: {
        chainId: ChainId;
    }): {
        [k: string]: SourceMetadata;
    };
    supportedGasSpeeds(): Record<ChainId, SupportInChain<DefaultGasValues>>;
    estimateQuotes({ request, config }: {
        request: EstimatedQuoteRequest;
        config?: {
            timeout?: TimeString;
        };
    }): any;
    estimateAllQuotes<IgnoreFailed extends boolean = true>({ request, config, }: {
        request: EstimatedQuoteRequest;
        config?: {
            ignoredFailed?: IgnoreFailed;
            sort?: {
                by: CompareQuotesBy;
                using?: CompareQuotesUsing;
            };
            timeout?: TimeString;
        };
    }): Promise<IgnoreFailedResponses<IgnoreFailed, EstimatedQuoteResponse>[]>;
    getQuotes({ request, config }: {
        request: QuoteRequest;
        config?: {
            timeout?: TimeString;
        };
    }): Record<SourceId, Promise<QuoteResponse>>;
    getAllQuotes<IgnoreFailed extends boolean = true>({ request, config, }: {
        request: QuoteRequest;
        config?: {
            ignoredFailed?: IgnoreFailed;
            sort?: {
                by: CompareQuotesBy;
                using?: CompareQuotesUsing;
            };
            timeout?: TimeString;
        };
    }): Promise<IgnoreFailedResponses<IgnoreFailed, QuoteResponse>[]>;
    getBestQuote({ request, config, }: {
        request: QuoteRequest;
        config?: {
            choose?: {
                by: CompareQuotesBy;
                using?: CompareQuotesUsing;
            };
            timeout?: TimeString;
        };
    }): Promise<QuoteResponse>;
    getAllQuotesWithTxs<IgnoreFailed extends boolean = true>({ request, config, }: {
        request: QuoteRequest;
        config?: {
            ignoredFailed?: IgnoreFailed;
            sort?: {
                by: CompareQuotesBy;
                using?: CompareQuotesUsing;
            };
            timeout?: TimeString;
        };
    }): Promise<IgnoreFailedResponses<IgnoreFailed, QuoteResponseWithTx>[]>;
    buildTxs({ quotes, config, sourceConfig, }: {
        quotes: Record<SourceId, Promise<QuoteResponse>> | Record<SourceId, QuoteResponse>;
        sourceConfig?: SourceConfig;
        config?: {
            timeout?: TimeString;
        };
    }): Record<SourceId, Promise<QuoteTransaction>>;
    buildAllTxs<IgnoreFailed extends boolean = true>({ quotes, sourceConfig, config, }: {
        quotes: Record<SourceId, Promise<QuoteResponse>> | Promise<Record<SourceId, QuoteResponse>> | Record<SourceId, QuoteResponse>;
        sourceConfig?: SourceConfig;
        config?: {
            timeout?: TimeString;
            ignoredFailed?: IgnoreFailed;
        };
    }): Promise<Record<SourceId, IgnoreFailedResponses<IgnoreFailed, QuoteTransaction>>>;
    private listResponseToQuoteResponse;
    private calculateSources;
    private calculateExternalPromises;
    private metadataChainFilter;
    private calculateConfig;
}
export declare function calculateGasDetails(gasTokenSymbol: string, gasCostNativeToken: BigIntish, nativeTokenPrice?: number): {
    estimatedCost: bigint;
    estimatedCostInUnits: string;
    estimatedCostInUSD: undefined;
    gasTokenPrice: number | undefined;
    gasTokenSymbol: string;
};
export declare function handleResponseFailure<Response>(sourceId: SourceId, response: Promise<Response>, sources: Record<SourceId, SourceMetadata>): Promise<FailedResponse | Response>;
export {};
