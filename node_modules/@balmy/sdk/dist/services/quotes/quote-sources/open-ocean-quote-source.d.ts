import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type OpenOceanSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type OpenOceanConfig = {
    sourceAllowlist?: string[];
    apiKey?: string;
};
type OpenOceanData = {
    tx: SourceQuoteTransaction;
};
export declare class OpenOceanQuoteSource extends AlwaysValidConfigAndContextSource<OpenOceanSupport, OpenOceanConfig, OpenOceanData> {
    getMetadata(): QuoteSourceMetadata<OpenOceanSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, external, }, config, }: QuoteParams<OpenOceanSupport, OpenOceanConfig>): Promise<SourceQuoteResponse<OpenOceanData>>;
    buildTx({ request }: BuildTxParams<OpenOceanConfig, OpenOceanData>): Promise<SourceQuoteTransaction>;
}
export {};
