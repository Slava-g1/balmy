import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
type ParaswapSupport = {
    buyOrders: true;
    swapAndTransfer: true;
};
type ParaswapConfig = {
    sourceAllowlist?: string[];
    sourceDenylist?: string[];
};
type ParaswapData = {
    tx: SourceQuoteTransaction;
};
export declare class ParaswapQuoteSource extends AlwaysValidConfigAndContextSource<ParaswapSupport, ParaswapConfig, ParaswapData> {
    getMetadata(): QuoteSourceMetadata<ParaswapSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { timeout, slippagePercentage, txValidFor }, external, }, config, }: QuoteParams<ParaswapSupport, ParaswapConfig>): Promise<SourceQuoteResponse<ParaswapData>>;
    buildTx({ request }: BuildTxParams<ParaswapConfig, ParaswapData>): Promise<SourceQuoteTransaction>;
}
export {};
