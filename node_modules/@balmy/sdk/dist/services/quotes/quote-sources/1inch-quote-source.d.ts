import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, IQuoteSource, SourceQuoteTransaction, BuildTxParams } from './types';
export declare const ONE_INCH_METADATA: QuoteSourceMetadata<OneInchSupport>;
type OneInchSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type CustomOrAPIKeyConfig = {
    customUrl: string;
    apiKey?: undefined;
} | {
    customUrl?: undefined;
    apiKey: string;
};
type OneInchConfig = {
    sourceAllowlist?: string[];
} & CustomOrAPIKeyConfig;
type OneInchData = {
    tx: SourceQuoteTransaction;
};
export declare class OneInchQuoteSource implements IQuoteSource<OneInchSupport, OneInchConfig, OneInchData> {
    getMetadata(): QuoteSourceMetadata<OneInchSupport>;
    quote(params: QuoteParams<OneInchSupport, OneInchConfig>): Promise<SourceQuoteResponse<OneInchData>>;
    buildTx({ request }: BuildTxParams<OneInchConfig, OneInchData>): Promise<SourceQuoteTransaction>;
    private getQuote;
    isConfigAndContextValidForQuoting(config: Partial<OneInchConfig> | undefined): config is OneInchConfig;
    isConfigAndContextValidForTxBuilding(config: Partial<OneInchConfig> | undefined): config is OneInchConfig;
}
export {};
