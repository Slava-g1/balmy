import { Timestamp } from '../../../types';
import { IQuoteSource, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
type BebopConfig = {
    apiKey: string;
};
type BebopSupport = {
    buyOrders: true;
    swapAndTransfer: true;
};
type BebopData = {
    tx: SourceQuoteTransaction;
    expiry: Timestamp;
};
export declare class BebopQuoteSource implements IQuoteSource<BebopSupport, BebopConfig, BebopData> {
    getMetadata(): QuoteSourceMetadata<BebopSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom, recipient }, }, config, }: QuoteParams<BebopSupport, BebopConfig>): Promise<SourceQuoteResponse<BebopData>>;
    buildTx({ request }: BuildTxParams<BebopConfig, BebopData>): Promise<SourceQuoteTransaction>;
    isConfigAndContextValidForQuoting(config: Partial<BebopConfig> | undefined): config is BebopConfig;
    isConfigAndContextValidForTxBuilding(config: Partial<BebopConfig> | undefined): config is BebopConfig;
}
export {};
