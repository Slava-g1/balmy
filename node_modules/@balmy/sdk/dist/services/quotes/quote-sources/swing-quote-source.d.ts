import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
import { Address } from '../../../types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type SwingConfig = {
    projectId?: string;
};
type SwingSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type SwingData = {
    chainKey: string;
    fromUserAddress: Address;
    toUserAddress: Address;
    tokenSymbol: string;
    fromTokenAddress: Address;
    toTokenSymbol: string;
    toTokenAddress: Address;
    tokenAmount: string;
    route: any;
    projectId: string;
};
export declare class SwingQuoteSource extends AlwaysValidConfigAndContextSource<SwingSupport, SwingConfig, SwingData> {
    getMetadata(): QuoteSourceMetadata<SwingSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom, recipient }, external: { tokenData }, }, config, }: QuoteParams<SwingSupport, SwingConfig>): Promise<SourceQuoteResponse<SwingData>>;
    buildTx({ request: { chainId, sellToken, buyToken, customData, config: { timeout }, }, components: { fetchService }, config, }: BuildTxParams<SwingConfig, SwingData>): Promise<SourceQuoteTransaction>;
}
export {};
