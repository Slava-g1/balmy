import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type UniswapSupport = {
    buyOrders: true;
    swapAndTransfer: true;
};
type UniswapConfig = {};
type UniswapData = {
    tx: SourceQuoteTransaction;
};
export declare class UniswapQuoteSource extends AlwaysValidConfigAndContextSource<UniswapSupport, UniswapConfig, UniswapData> {
    getMetadata(): QuoteSourceMetadata<UniswapSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout, txValidFor }, accounts: { takeFrom, recipient }, }, }: QuoteParams<UniswapSupport>): Promise<SourceQuoteResponse<UniswapData>>;
    buildTx({ request }: BuildTxParams<UniswapConfig, UniswapData>): Promise<SourceQuoteTransaction>;
}
export {};
