import { IQuoteSource, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
export declare const CHANGELLY_METADATA: QuoteSourceMetadata<ChangellySupport>;
type ChangellyConfig = {
    apiKey: string;
};
type ChangellySupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type ChangellyData = {
    tx: SourceQuoteTransaction;
};
export declare class ChangellyQuoteSource implements IQuoteSource<ChangellySupport, ChangellyConfig, ChangellyData> {
    getMetadata(): QuoteSourceMetadata<ChangellySupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, }, config, }: QuoteParams<ChangellySupport, ChangellyConfig>): Promise<SourceQuoteResponse<ChangellyData>>;
    buildTx({ request }: BuildTxParams<ChangellyConfig, ChangellyData>): Promise<SourceQuoteTransaction>;
    isConfigAndContextValidForQuoting(config: Partial<ChangellyConfig> | undefined): config is ChangellyConfig;
    isConfigAndContextValidForTxBuilding(config: Partial<ChangellyConfig> | undefined): config is ChangellyConfig;
}
export {};
