"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnsoQuoteSource = void 0;
const qs_1 = __importDefault(require("qs"));
const _chains_1 = require("../../../chains");
const utils_1 = require("./utils");
const ENSO_METADATA = {
    name: 'Enso',
    supports: {
        chains: [
            _chains_1.Chains.ETHEREUM.chainId,
            _chains_1.Chains.OPTIMISM.chainId,
            _chains_1.Chains.BNB_CHAIN.chainId,
            _chains_1.Chains.GNOSIS.chainId,
            _chains_1.Chains.POLYGON.chainId,
            _chains_1.Chains.BASE.chainId,
            _chains_1.Chains.ARBITRUM.chainId,
            _chains_1.Chains.AVALANCHE.chainId,
        ],
        swapAndTransfer: false,
        buyOrders: false,
    },
    logoURI: 'ipfs://QmWc9U7emJ7YvoLsxCvvJMxnEfMncJXrkqFpGoCP2LxZRJ',
};
class EnsoQuoteSource {
    getMetadata() {
        return ENSO_METADATA;
    }
    async quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom }, }, config, }) {
        const takeFromChecksummed = (0, utils_1.checksum)(takeFrom);
        const queryParams = {
            fromAddress: takeFromChecksummed,
            spender: takeFromChecksummed,
            receiver: takeFromChecksummed,
            tokenIn: sellToken,
            amountIn: order.sellAmount.toString(),
            tokenOut: buyToken,
            routingStrategy: config?.routingStrategy ?? 'router',
            priceImpact: false,
            chainId,
            slippage: Math.floor(slippagePercentage * 100),
            tokenInAmountToApprove: order.sellAmount.toString(),
            tokenInAmountToTransfer: order.sellAmount.toString(),
        };
        const queryString = qs_1.default.stringify(queryParams, { skipNulls: true, arrayFormat: 'comma' });
        const url = `https://api.enso.finance/api/v1/shortcuts/route?${queryString}`;
        const headers = { 'Content-Type': 'application/json' };
        if (config.apiKey) {
            headers['Authorization'] = `Bearer ${config.apiKey}`;
        }
        const response = await fetchService.fetch(url, { timeout, headers });
        if (!response.ok) {
            (0, utils_1.failed)(ENSO_METADATA, chainId, sellToken, buyToken, await response.text());
        }
        const { amountOut, gas, tx: { data, to, value }, } = await response.json();
        const quote = {
            sellAmount: order.sellAmount,
            buyAmount: BigInt(amountOut),
            allowanceTarget: (0, utils_1.calculateAllowanceTarget)(sellToken, to),
            estimatedGas: BigInt(gas),
            customData: {
                tx: {
                    calldata: data,
                    to,
                    value: BigInt(value ?? 0),
                },
            },
        };
        return (0, utils_1.addQuoteSlippage)(quote, order.type, slippagePercentage);
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
    isConfigAndContextValidForQuoting(config) {
        return !!config?.apiKey;
    }
    isConfigAndContextValidForTxBuilding(config) {
        return true;
    }
}
exports.EnsoQuoteSource = EnsoQuoteSource;
//# sourceMappingURL=enso-quote-source.js.map