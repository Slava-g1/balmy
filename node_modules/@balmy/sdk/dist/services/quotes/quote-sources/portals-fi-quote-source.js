"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalsFiQuoteSource = exports.PORTALS_FI_METADATA = void 0;
const qs_1 = __importDefault(require("qs"));
const constants_1 = require("../../../shared/constants");
const utils_1 = require("../../../shared/utils");
const utils_2 = require("./utils");
const _chains_1 = require("../../../chains");
// https://build.portals.fi/docs/concepts/networks
const PORTALS_FI_CHAIN_ID_TO_KEY = {
    [_chains_1.Chains.ETHEREUM.chainId]: 'ethereum',
    [_chains_1.Chains.OPTIMISM.chainId]: 'optimism',
    [_chains_1.Chains.FANTOM.chainId]: 'fantom',
    [_chains_1.Chains.ARBITRUM.chainId]: 'arbitrum',
    [_chains_1.Chains.POLYGON.chainId]: 'polygon',
    [_chains_1.Chains.AVALANCHE.chainId]: 'avalanche',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'bsc',
    [_chains_1.Chains.BASE.chainId]: 'base',
    [_chains_1.Chains.GNOSIS.chainId]: 'gnosis',
};
exports.PORTALS_FI_METADATA = {
    name: 'Portals.fi',
    supports: {
        chains: Object.keys(PORTALS_FI_CHAIN_ID_TO_KEY).map(Number),
        swapAndTransfer: false,
        buyOrders: false,
    },
    logoURI: 'ipfs://QmYJiiZAxFHSJb37y25unRUyWioTH6odKWmEZ1psD1DyuL',
};
class PortalsFiQuoteSource {
    getMetadata() {
        return exports.PORTALS_FI_METADATA;
    }
    async quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom }, config: { slippagePercentage, timeout }, }, config, }) {
        const mappedSellToken = mapToken(chainId, sellToken);
        const mappedBuyToken = mapToken(chainId, buyToken);
        const queryParams = {
            sender: takeFrom,
            inputToken: mappedSellToken,
            inputAmount: order.sellAmount.toString(),
            outputToken: mappedBuyToken,
            slippageTolerancePercentage: slippagePercentage,
            validate: !config.disableValidation,
            partner: config.referrer?.address,
            feePercentage: config.referrer ? 0 : undefined,
        };
        const queryString = qs_1.default.stringify(queryParams, { skipNulls: true, arrayFormat: 'comma' });
        const url = `https://api.portals.fi/v2/portal?${queryString}`;
        const key = config.apiKey.startsWith('Bearer ') ? config.apiKey : `Bearer ${config.apiKey}`;
        const response = await fetchService.fetch(url, {
            timeout,
            headers: { Authorization: key },
        });
        if (!response.ok) {
            (0, utils_2.failed)(exports.PORTALS_FI_METADATA, chainId, sellToken, buyToken, await response.text());
        }
        const { context: { outputAmount, minOutputAmount, value }, tx: { to, data, gasLimit }, } = await response.json();
        return {
            sellAmount: order.sellAmount,
            maxSellAmount: order.sellAmount,
            buyAmount: BigInt(outputAmount),
            minBuyAmount: BigInt(minOutputAmount),
            type: 'sell',
            estimatedGas: gasLimit ? BigInt(gasLimit) : undefined, // Portals does not estimate gas when validate=false
            allowanceTarget: (0, utils_2.calculateAllowanceTarget)(sellToken, to),
            customData: {
                tx: {
                    to,
                    calldata: data,
                    value: BigInt(value ?? 0),
                },
            },
        };
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
    isConfigAndContextValidForQuoting(config) {
        return !!config?.apiKey;
    }
    isConfigAndContextValidForTxBuilding(config) {
        return true;
    }
}
exports.PortalsFiQuoteSource = PortalsFiQuoteSource;
function mapToken(chainId, address) {
    const chainKey = PORTALS_FI_CHAIN_ID_TO_KEY[chainId];
    const mapped = (0, utils_1.isSameAddress)(address, constants_1.Addresses.NATIVE_TOKEN) ? constants_1.Addresses.ZERO_ADDRESS : address;
    return `${chainKey}:${mapped}`;
}
//# sourceMappingURL=portals-fi-quote-source.js.map