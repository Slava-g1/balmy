import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
type LiFiConfig = {
    apiKey?: string;
};
type LiFiSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type LiFiData = {
    tx: SourceQuoteTransaction;
};
export declare class LiFiQuoteSource extends AlwaysValidConfigAndContextSource<LiFiSupport, LiFiConfig> {
    getMetadata(): QuoteSourceMetadata<LiFiSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, }, config, }: QuoteParams<LiFiSupport, LiFiConfig>): Promise<SourceQuoteResponse<LiFiData>>;
    buildTx({ request }: BuildTxParams<LiFiConfig, LiFiData>): Promise<SourceQuoteTransaction>;
}
export {};
