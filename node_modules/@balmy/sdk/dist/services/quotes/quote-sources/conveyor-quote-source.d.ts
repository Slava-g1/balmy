import { ChainId } from '../../../types';
import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type ConveyorConfig = {
    referrerCodes?: Record<ChainId, number> | 'disable';
};
type ConveyorSupport = {
    buyOrders: false;
    swapAndTransfer: false;
};
type ConveyorData = {
    tx: SourceQuoteTransaction;
};
export declare class ConveyorQuoteSource extends AlwaysValidConfigAndContextSource<ConveyorSupport, ConveyorConfig, ConveyorData> {
    getMetadata(): QuoteSourceMetadata<ConveyorSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom }, }, config, }: QuoteParams<ConveyorSupport, ConveyorConfig>): Promise<SourceQuoteResponse<ConveyorData>>;
    buildTx({ request }: BuildTxParams<ConveyorConfig, ConveyorData>): Promise<SourceQuoteTransaction>;
}
export {};
