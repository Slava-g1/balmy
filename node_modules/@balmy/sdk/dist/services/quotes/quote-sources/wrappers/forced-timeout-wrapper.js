"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.forcedTimeoutWrapper = void 0;
const timeouts_1 = require("../../../../shared/timeouts");
// We will pass the timeout to the quote sources, but sometime they don't have a way to enforce. So the idea will be to
// add a wrapper that can enforce it
function forcedTimeoutWrapper(source) {
    return {
        getMetadata: () => source.getMetadata(),
        quote: ({ components, request, config }) => {
            const description = `Quote ${request.sellToken} => ${request.buyToken} on chain with id ${request.chainId} for source ${source.getMetadata().name}`;
            return (0, timeouts_1.timeoutPromise)(source.quote({ components, request, config }), request.config.timeout, { description });
        },
        buildTx: ({ components, request, config }) => {
            const description = `Tx build ${request.sellToken} => ${request.buyToken} on chain with id ${request.chainId} for source ${source.getMetadata().name}`;
            return (0, timeouts_1.timeoutPromise)(source.buildTx({ components, request, config }), request.config.timeout, { description });
        },
        isConfigAndContextValidForQuoting: (config) => {
            return source.isConfigAndContextValidForQuoting(config);
        },
        isConfigAndContextValidForTxBuilding: (config) => {
            return source.isConfigAndContextValidForTxBuilding(config);
        },
    };
}
exports.forcedTimeoutWrapper = forcedTimeoutWrapper;
//# sourceMappingURL=forced-timeout-wrapper.js.map