"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneInchQuoteSource = exports.ONE_INCH_METADATA = void 0;
const qs_1 = __importDefault(require("qs"));
const _chains_1 = require("../../../chains");
const utils_1 = require("./utils");
const utils_2 = require("../../../shared/utils");
// Supported networks: https://docs.1inch.io/docs/aggregation-protocol/introduction/#supported-networkschains
exports.ONE_INCH_METADATA = {
    name: '1inch',
    supports: {
        chains: [
            _chains_1.Chains.ETHEREUM.chainId,
            _chains_1.Chains.AURORA.chainId,
            _chains_1.Chains.BNB_CHAIN.chainId,
            _chains_1.Chains.POLYGON.chainId,
            _chains_1.Chains.OPTIMISM.chainId,
            _chains_1.Chains.ARBITRUM.chainId,
            _chains_1.Chains.GNOSIS.chainId,
            _chains_1.Chains.AVALANCHE.chainId,
            _chains_1.Chains.FANTOM.chainId,
            _chains_1.Chains.KAIA.chainId,
            _chains_1.Chains.AURORA.chainId,
            _chains_1.Chains.BASE.chainId,
        ],
        swapAndTransfer: true,
        buyOrders: false,
    },
    logoURI: 'ipfs://QmNr5MnyZKUv7rMhMyZPbxPbtc1A1yAVAqEEgVbep1hdBx',
};
class OneInchQuoteSource {
    getMetadata() {
        return exports.ONE_INCH_METADATA;
    }
    async quote(params) {
        const { dstAmount, to, data, value, gas } = await this.getQuote(params);
        const quote = {
            sellAmount: params.request.order.sellAmount,
            buyAmount: BigInt(dstAmount),
            estimatedGas: gas ? BigInt(gas) : undefined,
            allowanceTarget: (0, utils_1.calculateAllowanceTarget)(params.request.sellToken, to),
            customData: {
                tx: {
                    to,
                    calldata: data,
                    value: BigInt(value ?? 0),
                },
            },
        };
        return (0, utils_1.addQuoteSlippage)(quote, params.request.order.type, params.request.config.slippagePercentage);
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
    async getQuote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom, recipient }, }, config, }) {
        const queryParams = {
            src: sellToken,
            dst: buyToken,
            amount: order.sellAmount.toString(),
            from: takeFrom,
            slippage: slippagePercentage,
            disableEstimate: config.disableValidation,
            receiver: !!recipient && !(0, utils_2.isSameAddress)(takeFrom, recipient) ? recipient : undefined,
            referrer: config.referrer?.address,
            protocols: config.sourceAllowlist,
            includeGas: true,
        };
        const queryString = qs_1.default.stringify(queryParams, { skipNulls: true, arrayFormat: 'comma' });
        const url = `${getUrl(config)}/${chainId}/swap?${queryString}`;
        const response = await fetchService.fetch(url, { timeout, headers: getHeaders(config) });
        if (!response.ok) {
            (0, utils_1.failed)(exports.ONE_INCH_METADATA, chainId, sellToken, buyToken, (await response.text()) || `Failed with status ${response.status}`);
        }
        const { dstAmount, tx: { to, data, value, gas }, } = await response.json();
        return { dstAmount, to, data, value, gas };
    }
    isConfigAndContextValidForQuoting(config) {
        return !!config && (!!config.apiKey || !!config.customUrl);
    }
    isConfigAndContextValidForTxBuilding(config) {
        return true;
    }
}
exports.OneInchQuoteSource = OneInchQuoteSource;
function getUrl(config) {
    return config.customUrl ?? 'https://api.1inch.dev/swap/v6.0';
}
function getHeaders(config) {
    const headers = {
        accept: 'application/json',
    };
    if (config.apiKey) {
        headers['Authorization'] = `Bearer ${config.apiKey}`;
    }
    return headers;
}
//# sourceMappingURL=1inch-quote-source.js.map