"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangellyQuoteSource = exports.CHANGELLY_METADATA = void 0;
const qs_1 = __importDefault(require("qs"));
const _chains_1 = require("../../../chains");
const utils_1 = require("./utils");
const constants_1 = require("../../../shared/constants");
const utils_2 = require("../../../shared/utils");
exports.CHANGELLY_METADATA = {
    name: 'Changelly DEX',
    supports: {
        chains: [_chains_1.Chains.ETHEREUM, _chains_1.Chains.OPTIMISM, _chains_1.Chains.ARBITRUM, _chains_1.Chains.BNB_CHAIN, _chains_1.Chains.POLYGON, _chains_1.Chains.FANTOM, _chains_1.Chains.AVALANCHE].map(({ chainId }) => chainId),
        swapAndTransfer: true,
        buyOrders: false,
    },
    logoURI: 'ipfs://Qmbnnx5bD1wytBna4oY8DaL1cw5c5mTStwUMqLCoLt3yHR',
};
class ChangellyQuoteSource {
    getMetadata() {
        return exports.CHANGELLY_METADATA;
    }
    async quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, }, config, }) {
        const queryParams = {
            fromTokenAddress: sellToken,
            toTokenAddress: buyToken,
            amount: order.sellAmount.toString(),
            slippage: slippagePercentage * 10,
            recipientAddress: recipient && !(0, utils_2.isSameAddress)(recipient, takeFrom) ? recipient : undefined,
            skipValidation: config.disableValidation,
            // We disable RFQ when validation is turned off, because it fails quite often
            takerAddress: config.disableValidation ? undefined : takeFrom,
        };
        const queryString = qs_1.default.stringify(queryParams, { skipNulls: true, arrayFormat: 'comma' });
        const url = `https://dex-api.changelly.com/v1/${chainId}/quote?${queryString}`;
        const headers = { 'X-Api-Key': config.apiKey };
        const response = await fetchService.fetch(url, { timeout, headers });
        if (!response.ok) {
            (0, utils_1.failed)(exports.CHANGELLY_METADATA, chainId, sellToken, buyToken, await response.text());
        }
        const { amount_out_total, estimate_gas_total, calldata, to } = await response.json();
        const quote = {
            sellAmount: order.sellAmount,
            buyAmount: BigInt(amount_out_total),
            estimatedGas: BigInt(estimate_gas_total),
            allowanceTarget: (0, utils_1.calculateAllowanceTarget)(sellToken, to),
            customData: {
                tx: {
                    to,
                    calldata,
                    value: (0, utils_2.isSameAddress)(sellToken, constants_1.Addresses.NATIVE_TOKEN) ? order.sellAmount : 0n,
                },
            },
        };
        return (0, utils_1.addQuoteSlippage)(quote, order.type, slippagePercentage);
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
    isConfigAndContextValidForQuoting(config) {
        return !!config?.apiKey;
    }
    isConfigAndContextValidForTxBuilding(config) {
        return true;
    }
}
exports.ChangellyQuoteSource = ChangellyQuoteSource;
//# sourceMappingURL=changelly-quote-source.js.map