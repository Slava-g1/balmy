import { Address } from '../../../types';
import { QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type SourcesConfig = {
    sourceAllowlist?: string[];
    sourceDenylist?: undefined;
} | {
    sourceAllowlist?: undefined;
    sourceDenylist?: string[];
};
type OdosSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type OdosConfig = {
    supportRFQs?: boolean;
    referralCode?: number;
} & SourcesConfig;
type OdosData = {
    pathId: string;
    userAddr: Address;
    recipient: Address;
};
export declare class OdosQuoteSource extends AlwaysValidConfigAndContextSource<OdosSupport, OdosConfig, OdosData> {
    getMetadata(): QuoteSourceMetadata<OdosSupport>;
    quote(params: QuoteParams<OdosSupport, OdosConfig>): Promise<SourceQuoteResponse<OdosData>>;
    buildTx({ components: { fetchService }, request: { chainId, sellToken, buyToken, config: { timeout }, customData: { pathId, userAddr, recipient }, }, }: BuildTxParams<OdosConfig, OdosData>): Promise<SourceQuoteTransaction>;
}
export {};
