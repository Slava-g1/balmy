import { Address, TimeString } from '../../../types';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type OkuSupport = {
    buyOrders: true;
    swapAndTransfer: false;
};
type OkuConfig = {};
type OkuData = {
    coupon: any;
    signingRequest: any;
    txValidFor: TimeString | undefined;
    takeFrom: Address;
};
export declare class OkuQuoteSource extends AlwaysValidConfigAndContextSource<OkuSupport, OkuConfig, OkuData> {
    getMetadata(): QuoteSourceMetadata<OkuSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout, txValidFor }, accounts: { takeFrom }, external, }, }: QuoteParams<OkuSupport>): Promise<SourceQuoteResponse<OkuData>>;
    buildTx({ components: { fetchService }, request: { chainId, sellToken, buyToken, maxSellAmount, type, config: { timeout }, customData: { txValidFor, coupon, signingRequest, takeFrom }, }, }: BuildTxParams<OkuConfig, OkuData>): Promise<SourceQuoteTransaction>;
}
export {};
