"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SquidQuoteSource = void 0;
const _chains_1 = require("../../../chains");
const utils_1 = require("./utils");
// Must check app directly: https://app.squidrouter.com/
const SQUID_METADATA = {
    name: 'Squid',
    supports: {
        chains: [
            _chains_1.Chains.ETHEREUM.chainId,
            _chains_1.Chains.ARBITRUM.chainId,
            _chains_1.Chains.AVALANCHE.chainId,
            _chains_1.Chains.OPTIMISM.chainId,
            _chains_1.Chains.POLYGON.chainId,
            _chains_1.Chains.BASE.chainId,
            _chains_1.Chains.LINEA.chainId,
            _chains_1.Chains.BNB_CHAIN.chainId,
            _chains_1.Chains.FANTOM.chainId,
            _chains_1.Chains.MOONBEAM.chainId,
            _chains_1.Chains.CELO.chainId,
            _chains_1.Chains.KAVA.chainId,
            _chains_1.Chains.SCROLL.chainId,
            _chains_1.Chains.FANTOM.chainId,
            _chains_1.Chains.EVMOS.chainId,
            _chains_1.Chains.BLAST.chainId,
            _chains_1.Chains.MANTLE.chainId,
            _chains_1.Chains.MOONBEAM.chainId,
        ],
        swapAndTransfer: true,
        buyOrders: false,
    },
    logoURI: 'ipfs://QmeFkbb7iVCLCaLSYp7LUo1a5TA8LHrsrphnZV8PjUCTYA',
};
class SquidQuoteSource {
    getMetadata() {
        return SQUID_METADATA;
    }
    async quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, }, config, }) {
        const params = {
            fromChain: `${chainId}`,
            toChain: `${chainId}`,
            fromToken: sellToken,
            toToken: buyToken,
            fromAmount: order.sellAmount.toString(),
            fromAddress: takeFrom,
            toAddress: recipient ?? takeFrom,
            slippage: slippagePercentage,
        };
        const headers = {
            'Content-Type': 'application/json',
            'x-integrator-id': config.integratorId,
        };
        const response = await fetchService.fetch('https://apiplus.squidrouter.com/v2/route', {
            method: 'POST',
            body: JSON.stringify(params),
            timeout,
            headers,
        });
        if (!response.ok) {
            (0, utils_1.failed)(SQUID_METADATA, chainId, sellToken, buyToken, await response.text());
        }
        const { route: { estimate: { toAmount, toAmountMin }, transactionRequest: { data, gasLimit, target, value }, }, } = await response.json();
        return {
            sellAmount: order.sellAmount,
            maxSellAmount: order.sellAmount,
            buyAmount: BigInt(toAmount),
            minBuyAmount: BigInt(toAmountMin),
            type: 'sell',
            estimatedGas: BigInt(gasLimit),
            allowanceTarget: (0, utils_1.calculateAllowanceTarget)(sellToken, target),
            customData: {
                tx: {
                    to: target,
                    calldata: data,
                    value: BigInt(value ?? 0),
                },
            },
        };
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
    isConfigAndContextValidForQuoting(config) {
        return !!config?.integratorId;
    }
    isConfigAndContextValidForTxBuilding(config) {
        return true;
    }
}
exports.SquidQuoteSource = SquidQuoteSource;
//# sourceMappingURL=squid-quote-source.js.map