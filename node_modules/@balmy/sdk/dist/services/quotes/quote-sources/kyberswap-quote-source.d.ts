import { Address, TimeString } from '../../../types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
type KyberswapSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type KyberswapConfig = {};
type KyberswapData = {
    routeSummary: RouteSummary;
    txValidFor: TimeString | undefined;
    slippagePercentage: number;
    takeFrom: Address;
    recipient: Address | undefined;
};
export declare class KyberswapQuoteSource extends AlwaysValidConfigAndContextSource<KyberswapSupport, KyberswapConfig, KyberswapData> {
    getMetadata(): QuoteSourceMetadata<KyberswapSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout, txValidFor }, }, config, }: QuoteParams<KyberswapSupport>): Promise<SourceQuoteResponse<KyberswapData>>;
    buildTx({ components: { fetchService }, request: { chainId, sellToken, buyToken, sellAmount, config: { timeout }, customData: { routeSummary, txValidFor, slippagePercentage, takeFrom, recipient }, }, config, }: BuildTxParams<KyberswapConfig, KyberswapData>): Promise<SourceQuoteTransaction>;
}
type RouteSummary = {
    amountOut: `${bigint}`;
    gas: `${bigint}`;
    routerAddress: Address;
};
export {};
