import { Address } from '../../../types';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
export declare const BALMY_SUPPORTED_CHAINS: number[];
type BalmyConfig = {
    leftoverRecipient?: Address;
    url?: string;
};
type BalmySupport = {
    buyOrders: true;
    swapAndTransfer: true;
};
type BalmyData = {
    tx: SourceQuoteTransaction;
};
export declare class BalmyQuoteSource extends AlwaysValidConfigAndContextSource<BalmySupport, BalmyConfig, BalmyData> {
    getMetadata(): QuoteSourceMetadata<BalmySupport>;
    quote({ components: { fetchService }, request: { chainId, config: { slippagePercentage, timeout, txValidFor }, accounts: { takeFrom, recipient }, order, external, ...request }, config, }: QuoteParams<BalmySupport, BalmyConfig>): Promise<SourceQuoteResponse<BalmyData>>;
    buildTx({ request }: BuildTxParams<BalmyConfig, BalmyData>): Promise<SourceQuoteTransaction>;
}
export {};
