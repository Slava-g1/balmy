import { Address, TimeString } from '../../../types';
import { IQuoteSource, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
type BarterSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type BarterConfig = ({
    sourceAllowlist?: string[];
    sourceDenylist?: undefined;
} | {
    sourceAllowlist?: undefined;
    sourceDenylist?: string[];
}) & {
    authHeader: string;
    customSubdomain: string;
};
type BarterData = {
    recipient: Address;
    typeFilter: string[] | undefined;
    txValidFor: TimeString | undefined;
};
export declare class BarterQuoteSource implements IQuoteSource<BarterSupport, BarterConfig, BarterData> {
    getMetadata(): QuoteSourceMetadata<BarterSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout, txValidFor }, }, config, }: QuoteParams<BarterSupport, BarterConfig>): Promise<SourceQuoteResponse<BarterData>>;
    buildTx({ components: { fetchService }, request: { chainId, sellToken, buyToken, sellAmount, minBuyAmount, config: { timeout }, customData: { typeFilter, txValidFor, recipient }, }, config, }: BuildTxParams<BarterConfig, BarterData>): Promise<SourceQuoteTransaction>;
    isConfigAndContextValidForQuoting(config: Partial<BarterConfig> | undefined): config is BarterConfig;
    isConfigAndContextValidForTxBuilding(config: Partial<BarterConfig> | undefined): config is BarterConfig;
}
export {};
