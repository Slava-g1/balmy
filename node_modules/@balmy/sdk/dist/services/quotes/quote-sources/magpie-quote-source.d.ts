import { Address } from '../../../types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
type MagpieSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type MagpieConfig = {
    sourceAllowlist?: string[];
};
type MagpieData = {
    quoteId: string;
    takeFrom: Address;
    recipient: Address | undefined;
};
export declare class MagpieQuoteSource extends AlwaysValidConfigAndContextSource<MagpieSupport, MagpieConfig, MagpieData> {
    getMetadata(): QuoteSourceMetadata<MagpieSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, }, config, }: QuoteParams<MagpieSupport, MagpieConfig>): Promise<SourceQuoteResponse<MagpieData>>;
    buildTx({ components: { fetchService }, request: { chainId, sellToken, buyToken, config: { timeout }, customData: { quoteId, takeFrom, recipient }, }, }: BuildTxParams<MagpieConfig, MagpieData>): Promise<SourceQuoteTransaction>;
}
export {};
