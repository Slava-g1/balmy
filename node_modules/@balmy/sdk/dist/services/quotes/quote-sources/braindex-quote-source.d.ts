import { Hex } from 'viem';
import { Address, TimeString } from '../../../types';
import { BuildTxParams, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction } from './types';
import { AlwaysValidConfigAndContextSource } from './base/always-valid-source';
type BrainDexSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type BrainDexConfig = {};
type BrainDexData = {
    swapPaths: Hex;
    txValidFor: TimeString | undefined;
    recipient: Address;
};
export declare class BrainDexQuoteSource extends AlwaysValidConfigAndContextSource<BrainDexSupport, BrainDexConfig, BrainDexData> {
    getMetadata(): QuoteSourceMetadata<BrainDexSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout, txValidFor }, }, }: QuoteParams<BrainDexSupport>): Promise<SourceQuoteResponse<BrainDexData>>;
    buildTx({ request: { chainId, sellToken, buyToken, sellAmount, minBuyAmount, customData: { swapPaths, txValidFor, recipient }, }, }: BuildTxParams<BrainDexConfig, BrainDexData>): Promise<SourceQuoteTransaction>;
}
export {};
