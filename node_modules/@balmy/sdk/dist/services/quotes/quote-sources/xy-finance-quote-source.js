"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XYFinanceQuoteSource = void 0;
const qs_1 = __importDefault(require("qs"));
const _chains_1 = require("../../../chains");
const utils_1 = require("./utils");
const always_valid_source_1 = require("./base/always-valid-source");
// https://docs.xy.finance/supported-blockchains-bridges-dexs
const SUPPORTED_CHAINS = [
    _chains_1.Chains.ETHEREUM,
    _chains_1.Chains.BNB_CHAIN,
    _chains_1.Chains.POLYGON,
    _chains_1.Chains.CRONOS,
    _chains_1.Chains.AVALANCHE,
    _chains_1.Chains.ARBITRUM,
    _chains_1.Chains.OPTIMISM,
    _chains_1.Chains.ASTAR,
    _chains_1.Chains.POLYGON_ZKEVM,
    _chains_1.Chains.LINEA,
    _chains_1.Chains.BASE,
    _chains_1.Chains.SCROLL,
    _chains_1.Chains.BLAST,
    _chains_1.Chains.MANTLE,
];
const XY_FINANCE_METADATA = {
    name: 'XY Finance',
    supports: {
        chains: SUPPORTED_CHAINS.map(({ chainId }) => chainId),
        swapAndTransfer: true,
        buyOrders: false,
    },
    logoURI: 'ipfs://Qmeuf9xMFE66UBeBNb9SneyyqSNAhsiNXiHES1vCvpyrFS',
};
class XYFinanceQuoteSource extends always_valid_source_1.AlwaysValidConfigAndContextSource {
    getMetadata() {
        return XY_FINANCE_METADATA;
    }
    async quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, config: { slippagePercentage, timeout }, accounts: { takeFrom, recipient }, }, config, }) {
        const queryParams = {
            srcChainId: chainId,
            srcQuoteTokenAddress: sellToken,
            srcQuoteTokenAmount: order.sellAmount.toString(),
            dstChainId: chainId,
            dstQuoteTokenAddress: buyToken,
            slippage: slippagePercentage,
            receiver: recipient ?? takeFrom,
            affiliate: config.referrer?.address,
            srcSwapProvider: 'XY DexAggregator',
        };
        const queryString = qs_1.default.stringify(queryParams, { skipNulls: true, arrayFormat: 'comma' });
        const url = `https://aggregator-api.xy.finance/v1/buildTx?${queryString}`;
        const response = await fetchService.fetch(url, { timeout });
        if (!response.ok) {
            (0, utils_1.failed)(XY_FINANCE_METADATA, chainId, sellToken, buyToken, await response.text());
        }
        const { success, ...result } = await response.json();
        if (!success) {
            const { errorCode, errorMsg } = result;
            (0, utils_1.failed)(XY_FINANCE_METADATA, chainId, sellToken, buyToken, `Failed with code ${errorCode} and message '${errorMsg}'`);
        }
        const { route: { dstQuoteTokenAmount, minReceiveAmount, contractAddress, estimatedGas }, tx: { to, data, value }, } = result;
        return {
            sellAmount: order.sellAmount,
            maxSellAmount: order.sellAmount,
            buyAmount: BigInt(dstQuoteTokenAmount),
            minBuyAmount: BigInt(minReceiveAmount),
            estimatedGas: estimatedGas ?? BigInt(estimatedGas),
            allowanceTarget: (0, utils_1.calculateAllowanceTarget)(sellToken, contractAddress),
            type: 'sell',
            customData: {
                tx: {
                    calldata: data,
                    to,
                    value: BigInt(value ?? 0),
                },
            },
        };
    }
    async buildTx({ request }) {
        return request.customData.tx;
    }
}
exports.XYFinanceQuoteSource = XYFinanceQuoteSource;
//# sourceMappingURL=xy-finance-quote-source.js.map