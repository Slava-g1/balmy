import { IQuoteSource, QuoteParams, QuoteSourceMetadata, SourceQuoteResponse, SourceQuoteTransaction, BuildTxParams } from './types';
type RangoConfig = {
    apiKey: string;
    contractCall?: boolean;
};
type RangoSupport = {
    buyOrders: false;
    swapAndTransfer: true;
};
type RangoData = {
    tx: SourceQuoteTransaction;
    requestId: string;
};
export declare class RangoQuoteSource implements IQuoteSource<RangoSupport, RangoConfig, RangoData> {
    getMetadata(): QuoteSourceMetadata<RangoSupport>;
    quote({ components: { fetchService }, request: { chainId, sellToken, buyToken, order, accounts: { takeFrom, recipient }, config: { slippagePercentage, timeout }, external: { tokenData }, }, config, }: QuoteParams<RangoSupport, RangoConfig>): Promise<SourceQuoteResponse<RangoData>>;
    buildTx({ request }: BuildTxParams<RangoConfig, RangoData>): Promise<SourceQuoteTransaction>;
    isConfigAndContextValidForQuoting(config: Partial<RangoConfig> | undefined): config is RangoConfig;
    isConfigAndContextValidForTxBuilding(config: Partial<RangoConfig> | undefined): config is RangoConfig;
}
export {};
