import { GlobalQuoteSourceConfig, SourceMetadata } from './types';
import { Without } from '../../utility-types';
import { IQuoteSource } from './quote-sources/types';
import { OdosQuoteSource } from './quote-sources/odos-quote-source';
import { ParaswapQuoteSource } from './quote-sources/paraswap-quote-source';
import { ZRXQuoteSource } from './quote-sources/0x-quote-source';
import { OneInchQuoteSource } from './quote-sources/1inch-quote-source';
import { UniswapQuoteSource } from './quote-sources/uniswap-quote-source';
import { OpenOceanQuoteSource } from './quote-sources/open-ocean-quote-source';
import { LiFiQuoteSource } from './quote-sources/li-fi-quote-source';
import { KyberswapQuoteSource } from './quote-sources/kyberswap-quote-source';
import { RangoQuoteSource } from './quote-sources/rango-quote-source';
import { ChangellyQuoteSource } from './quote-sources/changelly-quote-source';
import { BalmyQuoteSource } from './quote-sources/balmy-quote-source';
import { PortalsFiQuoteSource } from './quote-sources/portals-fi-quote-source';
import { OKXDexQuoteSource } from './quote-sources/okx-dex-quote-source';
import { BebopQuoteSource } from './quote-sources/bebop-quote-source';
import { XYFinanceQuoteSource } from './quote-sources/xy-finance-quote-source';
import { MagpieQuoteSource } from './quote-sources/magpie-quote-source';
import { SquidQuoteSource } from './quote-sources/squid-quote-source';
import { ConveyorQuoteSource } from './quote-sources/conveyor-quote-source';
import { OkuQuoteSource } from './quote-sources/oku-quote-source';
import { EnsoQuoteSource } from './quote-sources/enso-quote-source';
import { BrainDexQuoteSource } from './quote-sources/braindex-quote-source';
import { SovrynQuoteSource } from './quote-sources/sovryn-quote-source';
import { BarterQuoteSource } from './quote-sources/barter-quote-source';
import { DodoDexQuoteSource } from './quote-sources/dodo-quote-source';
import { BalancerQuoteSource } from './quote-sources/balancer-quote-source';
import { SwingQuoteSource } from './quote-sources/swing-quote-source';
export declare const QUOTE_SOURCES: {
    bebop: BebopQuoteSource;
    paraswap: ParaswapQuoteSource;
    'xy-finance': XYFinanceQuoteSource;
    '0x': ZRXQuoteSource;
    '1inch': OneInchQuoteSource;
    uniswap: UniswapQuoteSource;
    'open-ocean': OpenOceanQuoteSource;
    'li-fi': LiFiQuoteSource;
    kyberswap: KyberswapQuoteSource;
    odos: OdosQuoteSource;
    braindex: BrainDexQuoteSource;
    barter: BarterQuoteSource;
    sovryn: SovrynQuoteSource;
    rango: RangoQuoteSource;
    changelly: ChangellyQuoteSource;
    balmy: BalmyQuoteSource;
    oku: OkuQuoteSource;
    magpie: MagpieQuoteSource;
    squid: SquidQuoteSource;
    'portals-fi': PortalsFiQuoteSource;
    enso: EnsoQuoteSource;
    'okx-dex': OKXDexQuoteSource;
    conveyor: ConveyorQuoteSource;
    dodo: DodoDexQuoteSource;
    balancer: BalancerQuoteSource;
    swing: SwingQuoteSource;
};
export declare const SOURCES_METADATA: Record<"0x" | "open-ocean" | "paraswap" | "1inch" | "balmy" | "bebop" | "xy-finance" | "uniswap" | "li-fi" | "kyberswap" | "odos" | "braindex" | "barter" | "sovryn" | "rango" | "changelly" | "oku" | "magpie" | "squid" | "portals-fi" | "enso" | "okx-dex" | "conveyor" | "dodo" | "balancer" | "swing", SourceMetadata>;
export type SourceWithConfigId = keyof LocalSourcesConfig;
export type SourceConfig = {
    global?: GlobalQuoteSourceConfig;
    custom?: Partial<LocalSourcesConfig>;
};
export type LocalSourceConfig = LocalSourcesConfig[keyof LocalSourcesConfig];
type ImplementedSources = typeof QUOTE_SOURCES;
type LocalSourcesConfig = Without<{
    [K in keyof AllLocalSourcesConfig]: ConfigHasKeys<AllLocalSourcesConfig[K]> extends true ? AllLocalSourcesConfig[K] : never;
}, never>;
type AllLocalSourcesConfig = {
    [K in keyof ImplementedSources]: ImplementedSources[K] extends IQuoteSource<any, any> ? GetCustomConfigFromSource<ImplementedSources[K]> : never;
};
type ConfigHasKeys<CustomQuoteSourceConfig extends object> = keyof CustomQuoteSourceConfig extends never ? false : true;
type GetCustomConfigFromSource<T extends IQuoteSource<any, any>> = T extends IQuoteSource<any, infer CustomQuoteSourceConfig> ? CustomQuoteSourceConfig : never;
export {};
