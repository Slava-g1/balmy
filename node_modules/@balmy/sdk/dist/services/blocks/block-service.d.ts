import { StringValue } from 'ms';
import { ChainId, TimeString, Timestamp } from '../../types';
import { BlockInput, IBlocksService, IBlocksSource } from './types';
export declare class BlocksService implements IBlocksService {
    private readonly source;
    constructor(source: IBlocksSource);
    supportedChains(): ChainId[];
    getBlockClosestToTimestampInChain({ chainId, timestamp, config, }: {
        chainId: ChainId;
        timestamp: Timestamp;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<import("./types").BlockResult>;
    getBlocksClosestToTimestampsInChain({ chainId, timestamps, config, }: {
        chainId: ChainId;
        timestamps: Timestamp[];
        config?: {
            timeout?: StringValue;
        };
    }): Promise<Record<number, import("./types").BlockResult>>;
    getBlocksClosestToTimestamps({ timestamps, config }: {
        timestamps: BlockInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<number, import("./types").BlockResult>>>;
}
