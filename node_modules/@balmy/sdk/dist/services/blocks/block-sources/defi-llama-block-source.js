"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefiLlamaBlockSource = void 0;
const defi_llama_1 = require("../../../shared/defi-llama");
class DefiLlamaBlockSource {
    constructor(fetch, providerService) {
        this.defiLlama = new defi_llama_1.DefiLlamaClient(fetch);
        this.providerService = providerService;
    }
    supportedChains() {
        return this.defiLlama.supportedChains();
    }
    async getBlocksClosestToTimestamps({ timestamps }) {
        const result = {};
        const promises = [];
        for (const { chainId, timestamp } of timestamps) {
            if (!(chainId in result))
                result[chainId] = {};
            const promise = this.defiLlama
                .getClosestBlock(chainId, timestamp)
                .then((block) => (result[chainId][timestamp] = block))
                .catch(async (e) => {
                const provider = this.providerService.getViemPublicClient({ chainId });
                // We're getting a timestamp value of 0n for genesis block, so we will use block 1n for now
                const blockOne = await provider.getBlock({ blockNumber: 1n });
                const blockTimestamp = Number(blockOne.timestamp);
                if (timestamp < blockTimestamp) {
                    result[chainId][timestamp] = { block: 1n, timestamp: blockTimestamp };
                }
                else {
                    throw e;
                }
            });
            promises.push(promise);
        }
        await Promise.all(promises);
        return result;
    }
}
exports.DefiLlamaBlockSource = DefiLlamaBlockSource;
//# sourceMappingURL=defi-llama-block-source.js.map