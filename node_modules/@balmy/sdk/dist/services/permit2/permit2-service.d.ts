import { Address, BigIntish, ChainId } from '../../types';
import { BatchPermitData, GenericBatchPermitParams, GenericSinglePermitParams, IPermit2ArbitraryService, IPermit2QuoteService, IPermit2Service, PermitData } from './types';
import { IProviderService } from '../providers';
import { IQuoteService } from '../quotes';
import { IGasService } from '../gas';
export declare class Permit2Service implements IPermit2Service {
    readonly permit2Contract: import("../..").Contract;
    readonly arbitrary: IPermit2ArbitraryService;
    readonly quotes: IPermit2QuoteService;
    readonly providerService: IProviderService;
    constructor(providerService: IProviderService, quoteService: IQuoteService, gasService: IGasService);
    calculateNonce({ chainId, appId, user }: {
        chainId: ChainId;
        appId: BigIntish;
        user: Address;
    }): Promise<bigint>;
    preparePermitData({ appId, chainId, spender, token, amount, signerAddress, signatureValidFor, }: GenericSinglePermitParams): Promise<PermitData>;
    prepareBatchPermitData({ appId, chainId, spender, tokens, signerAddress, signatureValidFor, }: GenericBatchPermitParams): Promise<BatchPermitData>;
}
