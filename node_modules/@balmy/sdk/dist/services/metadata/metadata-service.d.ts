import { ChainId, DefaultRequirements, FieldsRequirements, TimeString, TokenAddress } from '../../types';
import { IMetadataService, IMetadataSource, MetadataInput } from './types';
export declare class MetadataService<TokenMetadata extends object> implements IMetadataService<TokenMetadata> {
    private readonly metadataSource;
    constructor(metadataSource: IMetadataSource<TokenMetadata>);
    supportedChains(): ChainId[];
    supportedProperties(): Record<number, import("../../types").SupportInChain<TokenMetadata>>;
    getMetadataInChain<Requirements extends FieldsRequirements<TokenMetadata> = DefaultRequirements<TokenMetadata>>({ chainId, tokens, config, }: {
        chainId: ChainId;
        tokens: TokenAddress[];
        config?: {
            fields?: Requirements;
            timeout?: TimeString;
        };
    }): Promise<Record<string, import("./types").MetadataResult<TokenMetadata, Requirements>>>;
    getMetadata<Requirements extends FieldsRequirements<TokenMetadata> = DefaultRequirements<TokenMetadata>>({ tokens, config, }: {
        tokens: MetadataInput[];
        config?: {
            fields?: Requirements;
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, import("./types").MetadataResult<TokenMetadata, Requirements>>>>;
}
