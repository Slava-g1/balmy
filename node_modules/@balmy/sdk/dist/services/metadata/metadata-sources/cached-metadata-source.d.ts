import { FieldsRequirements, TimeString } from '../../../types';
import { CacheConfig } from '../../../shared/concurrent-lru-cache';
import { IMetadataSource, MetadataInput, MetadataResult } from '../types';
export declare class CachedMetadataSource<TokenMetadata extends object> implements IMetadataSource<TokenMetadata> {
    private readonly source;
    private readonly cache;
    constructor(source: IMetadataSource<TokenMetadata>, config: CacheConfig);
    getMetadata<Requirements extends FieldsRequirements<TokenMetadata>>({ tokens, config, }: {
        tokens: MetadataInput[];
        config?: {
            timeout?: TimeString;
            fields?: Requirements;
        };
    }): Promise<Record<number, Record<string, MetadataResult<TokenMetadata, Requirements>>>>;
    supportedProperties(): Record<number, import("../../../types").SupportInChain<TokenMetadata>>;
    private fetchMetadata;
}
