import { FieldsRequirements, SupportInChain, TimeString } from '../../../types';
import { IFetchService } from '../../fetch/types';
import { BaseTokenMetadata, IMetadataSource, MetadataInput, MetadataResult } from '../types';
export declare class DefiLlamaMetadataSource implements IMetadataSource<BaseTokenMetadata> {
    private readonly defiLlama;
    constructor(fetch: IFetchService);
    getMetadata<Requirements extends FieldsRequirements<BaseTokenMetadata>>(params: {
        tokens: MetadataInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, MetadataResult<BaseTokenMetadata, Requirements>>>>;
    supportedProperties(): {
        [k: string]: SupportInChain<BaseTokenMetadata>;
    };
}
