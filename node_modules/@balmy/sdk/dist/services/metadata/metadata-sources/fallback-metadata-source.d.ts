import { FieldsRequirements, TimeString } from '../../../types';
import { IMetadataSource, MergeMetadata, MetadataInput, MetadataResult } from '../types';
export declare class FallbackMetadataSource<Sources extends IMetadataSource<object>[] | []> implements IMetadataSource<MergeMetadata<Sources>> {
    private readonly sources;
    constructor(sources: Sources);
    getMetadata<Requirements extends FieldsRequirements<MergeMetadata<Sources>>>({ tokens, config, }: {
        tokens: MetadataInput[];
        config?: {
            fields?: Requirements;
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, MetadataResult<MergeMetadata<Sources>, Requirements>>>>;
    supportedProperties(): Record<number, import("../../../types").SupportInChain<MergeMetadata<Sources>>>;
}
