import { FieldsRequirements, SupportInChain, TimeString } from '../../../types';
import { BaseTokenMetadata, IMetadataSource, MetadataInput, MetadataResult } from '../types';
import { IProviderService } from '../../providers';
export type RPCMetadataProperties = BaseTokenMetadata & {
    name: string;
};
export declare class RPCMetadataSource implements IMetadataSource<RPCMetadataProperties> {
    private readonly providerService;
    constructor(providerService: IProviderService);
    getMetadata<Requirements extends FieldsRequirements<RPCMetadataProperties>>({ tokens, config, }: {
        tokens: MetadataInput[];
        config?: {
            fields?: Requirements;
            timeout: TimeString;
        };
    }): Promise<{
        [k: string]: Record<string, MetadataResult<RPCMetadataProperties, Requirements>>;
    }>;
    supportedProperties(): {
        [k: string]: SupportInChain<RPCMetadataProperties>;
    };
    private fetchMetadataInChain;
}
