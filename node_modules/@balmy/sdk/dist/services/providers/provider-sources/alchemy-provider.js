"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAlchemyRPCUrl = exports.alchemySupportedChains = exports.AlchemyProviderSource = void 0;
const _chains_1 = require("../../../chains");
const base_http_provider_1 = require("./base/base-http-provider");
const ALCHEMY_NETWORKS = {
    [_chains_1.Chains.ETHEREUM.chainId]: { key: 'eth-mainnet' },
    [_chains_1.Chains.ETHEREUM_SEPOLIA.chainId]: { key: 'eth-sepolia' },
    [_chains_1.Chains.OPTIMISM.chainId]: { key: 'opt-mainnet' },
    // [Chains.OPTIMISM_SEPOLIA.chainId]: { key: 'opt-sepolia' },
    [_chains_1.Chains.ARBITRUM.chainId]: { key: 'arb-mainnet' },
    // [Chains.ARBITRUM_SEPOLIA.chainId]: { key: 'arb-sepolia' },
    [_chains_1.Chains.POLYGON.chainId]: { key: 'polygon-mainnet' },
    [_chains_1.Chains.POLYGON_MUMBAI.chainId]: { key: 'polygon-mumbai' },
    [_chains_1.Chains.ASTAR.chainId]: { key: 'astar-mainnet' },
    [_chains_1.Chains.BLAST.chainId]: { key: 'blast-mainnet' },
    [_chains_1.Chains.BNB_CHAIN.chainId]: { key: 'bnb-mainnet', onlyPaid: true },
    [_chains_1.Chains.AVALANCHE.chainId]: { key: 'avax-mainnet', onlyPaid: true },
    [_chains_1.Chains.FANTOM.chainId]: { key: 'fantom-mainnet' },
    [_chains_1.Chains.METIS_ANDROMEDA.chainId]: { key: 'metis-mainnet', onlyPaid: true },
    [_chains_1.Chains.POLYGON_ZKEVM.chainId]: { key: 'polygonzkevm-mainnet' },
    // [Chains.POLYGON_ZKEVM_TESTNET.chainId]: { key: 'polygonzkevm-testnet' },
    [_chains_1.Chains.BASE.chainId]: { key: 'base-mainnet' },
    [_chains_1.Chains.GNOSIS.chainId]: { key: 'gnosis-mainnet', onlyPaid: true },
    [_chains_1.Chains.SCROLL.chainId]: { key: 'scroll-mainnet' },
    [_chains_1.Chains.opBNB.chainId]: { key: 'opbnb-mainnet', onlyPaid: true },
    // [Chains.BASE_SEPOLIA.chainId]: { key: 'base-sepolia' },
    // [Chains.ZKSYNC.chainId]: { key: 'zksync-mainnet' },
    // [Chains.ZKSYNC_SEPOLIA.chainId]: { key: 'zksync-sepolia' },
    [_chains_1.Chains.MANTLE.chainId]: { key: 'mantle-mainnet' },
    [_chains_1.Chains.ROOTSTOCK.chainId]: { key: 'rootstock-mainnet' },
    [_chains_1.Chains.LINEA.chainId]: { key: 'linea-mainnet' },
};
class AlchemyProviderSource extends base_http_provider_1.BaseHttpProvider {
    constructor(key, onChains) {
        super();
        this.key = key;
        if (typeof onChains === 'string') {
            this.supported = alchemySupportedChains({ onlyFree: onChains === 'free tier' });
        }
        else {
            this.supported = onChains ?? alchemySupportedChains();
        }
    }
    supportedChains() {
        return this.supported;
    }
    calculateUrl(chainId) {
        return buildAlchemyRPCUrl({ chainId, apiKey: this.key, protocol: 'https' });
    }
}
exports.AlchemyProviderSource = AlchemyProviderSource;
function alchemySupportedChains(args) {
    return Object.entries(ALCHEMY_NETWORKS)
        .filter(([_, { onlyPaid }]) => !onlyPaid || !args?.onlyFree)
        .map(([chainId]) => Number(chainId));
}
exports.alchemySupportedChains = alchemySupportedChains;
function buildAlchemyRPCUrl({ chainId, apiKey, protocol }) {
    const { key: alchemyNetwork } = ALCHEMY_NETWORKS[chainId];
    return `${protocol}://${alchemyNetwork}.g.alchemy.com/v2/${apiKey}`;
}
exports.buildAlchemyRPCUrl = buildAlchemyRPCUrl;
//# sourceMappingURL=alchemy-provider.js.map