"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dRPCSupportedChains = exports.buildDRPCUrl = exports.dRPCProviderSource = void 0;
const _chains_1 = require("../../../chains");
const base_http_provider_1 = require("./base/base-http-provider");
const SUPPORTED_CHAINS = {
    [_chains_1.Chains.ETHEREUM.chainId]: 'ethereum',
    [_chains_1.Chains.ETHEREUM_SEPOLIA.chainId]: 'sepolia',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'bsc',
    [_chains_1.Chains.POLYGON.chainId]: 'polygon',
    [_chains_1.Chains.POLYGON_MUMBAI.chainId]: 'polygon-mumbai',
    [_chains_1.Chains.ARBITRUM.chainId]: 'arbitrum',
    [_chains_1.Chains.OPTIMISM.chainId]: 'optimism',
    [_chains_1.Chains.LINEA.chainId]: 'linea',
    [_chains_1.Chains.BASE.chainId]: 'base',
    [_chains_1.Chains.FANTOM.chainId]: 'fantom',
    [_chains_1.Chains.AVALANCHE.chainId]: 'avalanche',
    [_chains_1.Chains.GNOSIS.chainId]: 'gnosis',
    [_chains_1.Chains.AURORA.chainId]: 'aurora',
    [_chains_1.Chains.POLYGON_ZKEVM.chainId]: 'polygon-zkevm',
    [_chains_1.Chains.KAIA.chainId]: 'klaytn',
    [_chains_1.Chains.BOBA.chainId]: 'boba-eth',
    [_chains_1.Chains.CELO.chainId]: 'celo',
    [_chains_1.Chains.CRONOS.chainId]: 'cronos',
    [_chains_1.Chains.FUSE.chainId]: 'fuse',
    [_chains_1.Chains.HECO.chainId]: 'heco',
    [_chains_1.Chains.KAVA.chainId]: 'kava',
    [_chains_1.Chains.METIS_ANDROMEDA.chainId]: 'metis',
    [_chains_1.Chains.MOONBEAM.chainId]: 'moonbeam',
    [_chains_1.Chains.MOONRIVER.chainId]: 'moonriver',
    [_chains_1.Chains.OKC.chainId]: 'oktc',
    [_chains_1.Chains.opBNB.chainId]: 'opbnb',
    [_chains_1.Chains.MODE.chainId]: 'mode',
    [_chains_1.Chains.SCROLL.chainId]: 'scroll',
    [_chains_1.Chains.BLAST.chainId]: 'blast',
};
class dRPCProviderSource extends base_http_provider_1.BaseHttpProvider {
    constructor(key, onChains) {
        super();
        this.key = key;
        this.supported = onChains ?? dRPCSupportedChains();
    }
    supportedChains() {
        return this.supported;
    }
    calculateUrl(chainId) {
        return buildDRPCUrl({ chainId, apiKey: this.key });
    }
}
exports.dRPCProviderSource = dRPCProviderSource;
function buildDRPCUrl({ chainId, apiKey }) {
    const chainKey = SUPPORTED_CHAINS[chainId];
    return `https://lb.drpc.org/ogrpc?network=${chainKey}&dkey=${apiKey}`;
}
exports.buildDRPCUrl = buildDRPCUrl;
function dRPCSupportedChains() {
    return Object.keys(SUPPORTED_CHAINS).map(Number);
}
exports.dRPCSupportedChains = dRPCSupportedChains;
//# sourceMappingURL=drpc-provider.js.map