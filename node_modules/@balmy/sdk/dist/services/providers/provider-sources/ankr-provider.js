"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ankrSupportedChains = exports.buildAnkrRPCUrl = exports.AnkrProviderSource = void 0;
const _chains_1 = require("../../../chains");
const base_http_provider_1 = require("./base/base-http-provider");
const SUPPORTED_CHAINS = {
    [_chains_1.Chains.POLYGON.chainId]: 'https://rpc.ankr.com/polygon',
    [_chains_1.Chains.AVALANCHE.chainId]: 'https://rpc.ankr.com/avalanche',
    [_chains_1.Chains.ETHEREUM.chainId]: 'https://rpc.ankr.com/eth',
    [_chains_1.Chains.ETHEREUM_GOERLI.chainId]: 'https://rpc.ankr.com/eth_goerli',
    [_chains_1.Chains.ETHEREUM_SEPOLIA.chainId]: 'https://rpc.ankr.com/eth_sepolia',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'https://rpc.ankr.com/bsc',
    [_chains_1.Chains.FANTOM.chainId]: 'https://rpc.ankr.com/fantom',
    [_chains_1.Chains.ARBITRUM.chainId]: 'https://rpc.ankr.com/arbitrum',
    [_chains_1.Chains.OPTIMISM.chainId]: 'https://rpc.ankr.com/optimism',
    [_chains_1.Chains.CELO.chainId]: 'https://rpc.ankr.com/celo',
    [_chains_1.Chains.GNOSIS.chainId]: 'https://rpc.ankr.com/gnosis',
    [_chains_1.Chains.POLYGON_ZKEVM.chainId]: 'https://rpc.ankr.com/polygon_zkevm',
    [_chains_1.Chains.HARMONY_SHARD_0.chainId]: 'https://rpc.ankr.com/harmony',
    [_chains_1.Chains.MOONBEAM.chainId]: 'https://rpc.ankr.com/moonbeam',
    [_chains_1.Chains.BIT_TORRENT.chainId]: 'https://rpc.ankr.com/bttc',
    [_chains_1.Chains.BASE.chainId]: 'https://rpc.ankr.com/base',
    [_chains_1.Chains.KAIA.chainId]: 'https://rpc.ankr.com/klaytn',
    [_chains_1.Chains.SCROLL.chainId]: 'https://rpc.ankr.com/scroll',
};
class AnkrProviderSource extends base_http_provider_1.BaseHttpProvider {
    constructor(key, onChains) {
        super();
        this.key = key;
        this.supported = onChains ?? ankrSupportedChains();
    }
    supportedChains() {
        return this.supported;
    }
    calculateUrl(chainId) {
        return buildAnkrRPCUrl({ chainId, apiKey: this.key });
    }
}
exports.AnkrProviderSource = AnkrProviderSource;
function buildAnkrRPCUrl({ chainId, apiKey }) {
    let url = SUPPORTED_CHAINS[chainId];
    if (apiKey) {
        url += `/${apiKey}`;
    }
    return url;
}
exports.buildAnkrRPCUrl = buildAnkrRPCUrl;
function ankrSupportedChains() {
    return Object.keys(SUPPORTED_CHAINS).map(Number);
}
exports.ankrSupportedChains = ankrSupportedChains;
//# sourceMappingURL=ankr-provider.js.map