"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.llamaNodesSupportedChains = exports.buildLlamaNodesRPCUrl = exports.LlamaNodesProviderSource = void 0;
const _chains_1 = require("../../../chains");
const base_http_provider_1 = require("./base/base-http-provider");
const SUPPORTED_CHAINS = {
    [_chains_1.Chains.ETHEREUM.chainId]: 'https://eth.llamarpc.com',
    [_chains_1.Chains.POLYGON.chainId]: 'https://polygon.llamarpc.com',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'https://binance.llamarpc.com',
    [_chains_1.Chains.ARBITRUM.chainId]: 'https://arbitrum.llamarpc.com',
    [_chains_1.Chains.OPTIMISM.chainId]: 'https://optimism.llamarpc.com',
    [_chains_1.Chains.BASE.chainId]: 'https://base.llamarpc.com',
};
class LlamaNodesProviderSource extends base_http_provider_1.BaseHttpProvider {
    constructor(key, onChains) {
        super();
        this.key = key;
        this.supported = onChains ?? llamaNodesSupportedChains();
    }
    supportedChains() {
        return this.supported;
    }
    calculateUrl(chainId) {
        return buildLlamaNodesRPCUrl({ chainId, apiKey: this.key });
    }
}
exports.LlamaNodesProviderSource = LlamaNodesProviderSource;
function buildLlamaNodesRPCUrl({ chainId, apiKey }) {
    let url = SUPPORTED_CHAINS[chainId];
    if (apiKey) {
        url += `/rpc/${apiKey}`;
    }
    return url;
}
exports.buildLlamaNodesRPCUrl = buildLlamaNodesRPCUrl;
function llamaNodesSupportedChains() {
    return Object.keys(SUPPORTED_CHAINS).map(Number);
}
exports.llamaNodesSupportedChains = llamaNodesSupportedChains;
//# sourceMappingURL=llama-nodes-provider.js.map