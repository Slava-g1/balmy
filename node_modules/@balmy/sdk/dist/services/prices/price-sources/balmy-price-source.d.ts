import { ChainId, TimeString, Timestamp, TokenAddress } from '../../../types';
import { IFetchService } from '../../fetch/types';
import { PriceResult, IPriceSource, PriceInput } from '../types';
export declare class BalmyPriceSource implements IPriceSource {
    private readonly fetch;
    private readonly apiKey;
    constructor(fetch: IFetchService, apiKey: string);
    supportedQueries(): any;
    getCurrentPrices({ tokens, config, }: {
        tokens: PriceInput[];
        config: {
            timeout?: TimeString;
        } | undefined;
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult>>>;
    getHistoricalPrices({ tokens, timestamp, searchWidth, config, }: {
        tokens: PriceInput[];
        timestamp: Timestamp;
        searchWidth: TimeString | undefined;
        config: {
            timeout?: TimeString;
        } | undefined;
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult>>>;
    getBulkHistoricalPrices({ tokens, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
            timestamp: Timestamp;
        }[];
        searchWidth: TimeString | undefined;
        config: {
            timeout?: TimeString;
        } | undefined;
    }): Promise<Record<ChainId, Record<TokenAddress, Record<Timestamp, PriceResult>>>>;
    getChart(_: {
        tokens: PriceInput[];
        span: number;
        period: TimeString;
        bound: {
            from: Timestamp;
        } | {
            upTo: Timestamp | 'now';
        };
        searchWidth?: TimeString;
        config: {
            timeout?: TimeString;
        } | undefined;
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult[]>>>;
}
