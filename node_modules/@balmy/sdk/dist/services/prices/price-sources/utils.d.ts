import { ChainId, TokenAddress } from '../../../types';
import { IPriceSource, PriceInput, PricesQueriesSupport } from '../types';
export declare function fillResponseWithNewResult<T>(result: Record<ChainId, Record<TokenAddress, T>>, newResult: Record<ChainId, Record<TokenAddress, T>>): void;
export declare function doesResponseFulfillRequest<T>(result: Record<ChainId, Record<TokenAddress, T>>, request: Record<ChainId, TokenAddress[]>): boolean;
export declare function filterRequestForSource<T extends {
    chainId: ChainId;
}>(request: T[], query: keyof PricesQueriesSupport, source: IPriceSource): T[];
export declare function combineSupport(sources: IPriceSource[]): Record<ChainId, PricesQueriesSupport>;
export declare function getSourcesThatSupportRequestOrFail<T extends PriceInput>(request: T[], sources: IPriceSource[], query: keyof PricesQueriesSupport): IPriceSource[];
export declare function nowInSeconds(): number;
