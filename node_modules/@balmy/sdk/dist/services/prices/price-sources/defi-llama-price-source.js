"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefiLlamaPriceSource = void 0;
const defi_llama_1 = require("../../../shared/defi-llama");
class DefiLlamaPriceSource {
    constructor(fetch) {
        this.defiLlama = new defi_llama_1.DefiLlamaClient(fetch);
    }
    supportedQueries() {
        const support = { getCurrentPrices: true, getHistoricalPrices: true, getBulkHistoricalPrices: true, getChart: true };
        const entries = this.defiLlama.supportedChains().map((chainId) => [chainId, support]);
        return Object.fromEntries(entries);
    }
    async getCurrentPrices(params) {
        const result = {};
        const data = await this.defiLlama.getCurrentTokenData(params);
        for (const [chainIdString, tokens] of Object.entries(data)) {
            const chainId = Number(chainIdString);
            result[chainId] = {};
            for (const [address, token] of Object.entries(tokens)) {
                result[chainId][address] = { price: token.price, closestTimestamp: token.timestamp };
            }
        }
        return result;
    }
    async getHistoricalPrices(params) {
        const result = {};
        const data = await this.defiLlama.getHistoricalTokenData(params);
        for (const [chainIdString, tokens] of Object.entries(data)) {
            const chainId = Number(chainIdString);
            result[chainId] = {};
            for (const [address, { price, timestamp }] of Object.entries(tokens)) {
                result[chainId][address] = { price, closestTimestamp: timestamp };
            }
        }
        return result;
    }
    async getBulkHistoricalPrices({ tokens, searchWidth, config, }) {
        return this.defiLlama.getBulkHistoricalTokenData({ tokens, searchWidth, config });
    }
    async getChart({ tokens, span, period, bound, searchWidth, config, }) {
        return this.defiLlama.getChart({ tokens, span, period, bound, searchWidth, config });
    }
}
exports.DefiLlamaPriceSource = DefiLlamaPriceSource;
//# sourceMappingURL=defi-llama-price-source.js.map