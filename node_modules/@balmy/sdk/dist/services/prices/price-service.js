"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceService = void 0;
const timeouts_1 = require("../../shared/timeouts");
class PriceService {
    constructor(priceSource) {
        this.priceSource = priceSource;
    }
    supportedChains() {
        return Object.entries(this.supportedQueries())
            .filter(([, support]) => support.getCurrentPrices || support.getHistoricalPrices)
            .map(([chainId]) => Number(chainId));
    }
    supportedQueries() {
        return this.priceSource.supportedQueries();
    }
    async getCurrentPricesInChain({ chainId, tokens, config, }) {
        const input = tokens.map((token) => ({ chainId, token }));
        const result = await this.getCurrentPrices({ tokens: input, config });
        return result[chainId] ?? {};
    }
    getCurrentPrices({ tokens, config, }) {
        return (0, timeouts_1.timeoutPromise)(this.priceSource.getCurrentPrices({ tokens, config }), config?.timeout, {
            description: 'Timeouted while fetching current prices',
        });
    }
    async getHistoricalPricesInChain({ chainId, tokens, timestamp, searchWidth, config, }) {
        const input = tokens.map((token) => ({ chainId, token }));
        const result = await this.getHistoricalPrices({ tokens: input, timestamp, searchWidth, config });
        return result[chainId] ?? {};
    }
    getHistoricalPrices({ config, searchWidth, ...params }) {
        return (0, timeouts_1.timeoutPromise)(this.priceSource.getHistoricalPrices({ ...params, searchWidth, config }), config?.timeout, {
            description: 'Timeouted while fetching historical prices',
        });
    }
    getBulkHistoricalPrices({ tokens, searchWidth, config, }) {
        return (0, timeouts_1.timeoutPromise)(this.priceSource.getBulkHistoricalPrices({ tokens, searchWidth, config }), config?.timeout, {
            description: 'Timeouted while fetching bulk historical prices',
        });
    }
    getChart({ tokens, span, period, bound, searchWidth, config, }) {
        return (0, timeouts_1.timeoutPromise)(this.priceSource.getChart({ tokens, span, period, bound, searchWidth, config }), config?.timeout, {
            description: 'Timeouted while fetching chart prices',
        });
    }
}
exports.PriceService = PriceService;
//# sourceMappingURL=price-service.js.map