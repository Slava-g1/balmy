import { ChainId, TimeString, Timestamp, TokenAddress } from '../../types';
import { IPriceService, IPriceSource, PriceInput, PriceResult } from './types';
export declare class PriceService implements IPriceService {
    private readonly priceSource;
    constructor(priceSource: IPriceSource);
    supportedChains(): number[];
    supportedQueries(): Record<number, import("./types").PricesQueriesSupport>;
    getCurrentPricesInChain({ chainId, tokens, config, }: {
        chainId: ChainId;
        tokens: TokenAddress[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<TokenAddress, PriceResult>>;
    getCurrentPrices({ tokens, config, }: {
        tokens: PriceInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult>>>;
    getHistoricalPricesInChain({ chainId, tokens, timestamp, searchWidth, config, }: {
        chainId: ChainId;
        tokens: TokenAddress[];
        timestamp: Timestamp;
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<string, PriceResult>>;
    getHistoricalPrices({ config, searchWidth, ...params }: {
        tokens: PriceInput[];
        timestamp: Timestamp;
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, PriceResult>>>;
    getBulkHistoricalPrices({ tokens, searchWidth, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
            timestamp: Timestamp;
        }[];
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, Record<Timestamp, PriceResult>>>>;
    getChart({ tokens, span, period, bound, searchWidth, config, }: {
        tokens: PriceInput[];
        span: number;
        period: TimeString;
        bound: {
            from: Timestamp;
        } | {
            upTo: Timestamp | 'now';
        };
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult[]>>>;
}
