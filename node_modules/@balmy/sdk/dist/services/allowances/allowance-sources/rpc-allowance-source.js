"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCAllowanceSource = void 0;
const timeouts_1 = require("../../../shared/timeouts");
const utils_1 = require("../../../shared/utils");
const erc20_1 = __importDefault(require("../../../shared/abis/erc20"));
const utils_2 = require("../../providers/utils");
class RPCAllowanceSource {
    constructor(providerService) {
        this.providerService = providerService;
    }
    supportedChains() {
        return this.providerService.supportedChains();
    }
    async getAllowances({ allowances, config, }) {
        const groupedByChain = (0, utils_1.groupByChain)(allowances);
        const promises = Object.entries(groupedByChain).map(async ([chainId, checks]) => [
            Number(chainId),
            await (0, timeouts_1.timeoutPromise)(this.getAllowancesInChain(Number(chainId), checks), config?.timeout, { reduceBy: '100' }),
        ]);
        return Object.fromEntries(await (0, utils_1.filterRejectedResults)(promises));
    }
    async getAllowancesInChain(chainId, checks) {
        const contracts = checks.map(({ token, owner, spender }) => ({
            address: token,
            abi: erc20_1.default,
            functionName: 'allowance',
            args: [owner, spender],
        }));
        const multicallResults = contracts.length
            ? await this.providerService
                .getViemPublicClient({ chainId })
                .multicall({ multicallAddress: utils_2.MULTICALL_CONTRACT.address(chainId), contracts, batchSize: 0 })
            : [];
        const result = {};
        for (let i = 0; i < multicallResults.length; i++) {
            const multicallResult = multicallResults[i];
            if (multicallResult.status === 'failure')
                continue;
            const { token, owner, spender } = checks[i];
            if (!(token in result))
                result[token] = {};
            if (!(owner in result[token]))
                result[token][owner] = {};
            result[token][owner][spender] = multicallResult.result;
        }
        return result;
    }
}
exports.RPCAllowanceSource = RPCAllowanceSource;
//# sourceMappingURL=rpc-allowance-source.js.map