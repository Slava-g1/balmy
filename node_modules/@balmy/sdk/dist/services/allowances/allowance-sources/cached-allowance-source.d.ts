import { ChainId, TimeString, TokenAddress } from '../../../types';
import { CacheConfig } from '../../../shared/concurrent-lru-cache';
import { AllowanceInput, IAllowanceSource, OwnerAddress, SpenderAddress } from '../types';
export declare class CachedAllowanceSource implements IAllowanceSource {
    private readonly source;
    private readonly cache;
    constructor(source: IAllowanceSource, config: CacheConfig);
    supportedChains(): ChainId[];
    getAllowances({ allowances, config, }: {
        allowances: AllowanceInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, Record<OwnerAddress, Record<SpenderAddress, bigint>>>>>;
    private fetchTokens;
}
