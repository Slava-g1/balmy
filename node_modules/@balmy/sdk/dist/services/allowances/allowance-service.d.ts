import { ChainId, TimeString, TokenAddress } from '../../types';
import { AllowanceInput, IAllowanceService, IAllowanceSource, OwnerAddress, SpenderAddress } from './types';
export declare class AllowanceService implements IAllowanceService {
    private readonly source;
    constructor(source: IAllowanceSource);
    supportedChains(): ChainId[];
    getAllowanceInChain({ chainId, token, owner, spender, config, }: {
        chainId: ChainId;
        token: TokenAddress;
        owner: OwnerAddress;
        spender: SpenderAddress;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<bigint>;
    getAllowancesInChain({ chainId, allowances, config, }: {
        chainId: ChainId;
        allowances: Omit<AllowanceInput, 'chainId'>[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<string, Record<string, Record<string, bigint>>>>;
    getAllowances({ allowances, config }: {
        allowances: AllowanceInput[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, Record<string, Record<string, bigint>>>>>;
}
