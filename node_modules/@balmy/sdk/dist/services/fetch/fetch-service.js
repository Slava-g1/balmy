"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchService = void 0;
const ms_1 = __importDefault(require("ms"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const timeouts_1 = require("../../shared/timeouts");
class FetchService {
    constructor(realFetch = cross_fetch_1.default) {
        this.realFetch = realFetch;
    }
    async fetch(url, init) {
        const { timeout: timeoutText, ...otherConfig } = init ?? {};
        // We add a very long timeout if there isn't one, so we can be sure that all requests end at some point
        const timeout = timeoutText ?? '5m';
        const controller = new AbortController();
        let timeouted = false;
        const timeoutId = setTimeout(() => {
            timeouted = true;
            controller.abort();
        }, (0, ms_1.default)(timeout));

        const startTime = Date.now(); // Start time for latency tracking
        
        try {
            console.log(`ðŸŸ¡ Starting request to: ${url}`);
            return await this.realFetch(url, { ...otherConfig, signal: controller.signal });
            const duration = Date.now() - startTime; // Calculate latency
            console.log(`ðŸŸ¢ Response from ${url} completed in ${duration} ms - Status: ${response.status}`);
            return response;
        }
        catch (e) {
            const duration = Date.now() - startTime; // Capture time on error
            if (timeouted) {
                // Trying to throw a better error
                console.error(`ðŸ”´ Request to ${url} timed out after ${duration} ms`);
                throw new timeouts_1.TimeoutError(`Request to ${url}`, timeout);
            }
            console.error(`ðŸ”´ Request to ${url} failed after ${duration} ms: ${e.message}`);
            throw e;
        }
        finally {
            clearTimeout(timeoutId);
        }
    }
}
exports.FetchService = FetchService;
//# sourceMappingURL=fetch-service.js.map