import { BigIntish, ChainId, DefaultRequirements, FieldsRequirements, TimeString, InputTransaction } from '../../types';
import { IProviderService } from '../providers/types';
import { IGasService, IQuickGasCostCalculator, SupportedGasValues, IGasPriceSource, GasEstimation } from './types';
type ConstructorParameters<GasValues extends SupportedGasValues> = {
    providerService: IProviderService;
    gasPriceSource: IGasPriceSource<GasValues>;
};
export declare class GasService<GasValues extends SupportedGasValues> implements IGasService<GasValues> {
    private readonly providerService;
    private readonly gasPriceSource;
    constructor({ providerService, gasPriceSource }: ConstructorParameters<GasValues>);
    supportedChains(): ChainId[];
    supportedSpeeds(): {
        [k: string]: import("../../types").SupportInChain<GasValues>;
    };
    estimateGas({ chainId, tx, config }: {
        chainId: ChainId;
        tx: InputTransaction;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<bigint>;
    getQuickGasCalculator<Requirements extends FieldsRequirements<GasValues> = DefaultRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            timeout?: TimeString;
            fields?: Requirements;
        };
    }): Promise<IQuickGasCostCalculator<GasValues, Requirements>>;
    getGasPrice<Requirements extends FieldsRequirements<GasValues> = DefaultRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            timeout?: TimeString;
            fields?: Requirements;
        };
    }): Promise<import("./types").GasPriceResult<GasValues, Requirements>>;
    calculateGasCost<Requirements extends FieldsRequirements<GasValues> = DefaultRequirements<GasValues>>({ chainId, gasEstimation, tx, config, }: {
        chainId: ChainId;
        gasEstimation: BigIntish;
        tx?: InputTransaction;
        config?: {
            timeout?: TimeString;
            fields?: Requirements;
        };
    }): Promise<GasEstimation<GasValues, Requirements>>;
    private estimateGasInternal;
}
export {};
