import { ChainId, FieldsRequirements, TimeString } from '../../../types';
import { SupportedGasValues, IGasPriceSource, GasPriceResult } from '../types';
import { ExpirationConfigOptions } from '../../../shared/concurrent-lru-cache';
type ConstructorParameters<GasValues extends SupportedGasValues> = {
    underlying: IGasPriceSource<GasValues>;
    expiration: {
        default: ExpirationConfigOptions;
        overrides?: Record<ChainId, ExpirationConfigOptions>;
    };
    maxSize?: number;
};
export declare class CachedGasPriceSource<GasValues extends SupportedGasValues> implements IGasPriceSource<GasValues> {
    private readonly cache;
    private readonly underlying;
    private readonly expirationOverrides;
    constructor({ underlying, expiration, maxSize }: ConstructorParameters<GasValues>);
    supportedSpeeds(): Record<number, import("../../../types").SupportInChain<GasValues>>;
    getGasPrice<Requirements extends FieldsRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            fields?: Requirements;
            timeout?: TimeString;
        };
    }): Promise<GasPriceResult<GasValues, Requirements>>;
    private toCacheKey;
    private fromCacheKey;
}
export {};
