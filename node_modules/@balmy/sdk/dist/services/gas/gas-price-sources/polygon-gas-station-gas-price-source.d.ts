import { ChainId, FieldsRequirements, SupportRecord, TimeString } from '../../../types';
import { IGasPriceSource, EIP1159GasPrice, GasPriceResult, GasValueForVersion } from '../types';
import { IFetchService } from '../../fetch/types';
type GasValues = GasValueForVersion<'standard' | 'fast' | 'instant', EIP1159GasPrice>;
export declare class PolygonGasStationGasPriceSource implements IGasPriceSource<GasValues> {
    private readonly fetchService;
    constructor(fetchService: IFetchService);
    supportedSpeeds(): {
        [x: number]: SupportRecord<GasValues>;
    };
    getGasPrice<Requirements extends FieldsRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<GasPriceResult<GasValues, Requirements>>;
}
export {};
