"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParaswapGasPriceSource = void 0;
const _chains_1 = require("../../../chains");
const SUPPORTED_CHAINS = [
    _chains_1.Chains.ETHEREUM,
    _chains_1.Chains.POLYGON,
    _chains_1.Chains.BNB_CHAIN,
    _chains_1.Chains.AVALANCHE,
    _chains_1.Chains.FANTOM,
    _chains_1.Chains.ARBITRUM,
    _chains_1.Chains.OPTIMISM,
    _chains_1.Chains.BASE,
];
class ParaswapGasPriceSource {
    constructor(fetchService) {
        this.fetchService = fetchService;
    }
    supportedSpeeds() {
        const support = { standard: 'present', fast: 'present', instant: 'present' };
        return Object.fromEntries(SUPPORTED_CHAINS.map(({ chainId }) => [Number(chainId), support]));
    }
    async getGasPrice({ chainId, config, }) {
        const response = await this.fetchService.fetch(`https://api.paraswap.io/prices/gas/${chainId}?eip1559=false`, { timeout: config?.timeout });
        const body = await response.json();
        return {
            standard: stringToLegacyGasPrice(body, 'average'),
            fast: stringToLegacyGasPrice(body, 'fast'),
            instant: stringToLegacyGasPrice(body, 'fastest'),
        };
    }
}
exports.ParaswapGasPriceSource = ParaswapGasPriceSource;
function stringToLegacyGasPrice(body, key) {
    return { gasPrice: BigInt(body[key]) };
}
//# sourceMappingURL=paraswap-gas-price-source.js.map