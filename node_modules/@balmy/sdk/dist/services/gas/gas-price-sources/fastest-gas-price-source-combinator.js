"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastestGasPriceSourceCombinator = void 0;
const requirements_and_support_1 = require("../../../shared/requirements-and-support");
// This source will take a list of sources, and try to calculate the gas price on all of them, returning
// the one that resolves first
class FastestGasPriceSourceCombinator {
    constructor(sources) {
        this.sources = sources;
        if (sources.length === 0)
            throw new Error('No sources were specified');
    }
    supportedSpeeds() {
        return (0, requirements_and_support_1.combineSourcesSupport)(this.sources, (source) => source.supportedSpeeds());
    }
    async getGasPrice({ chainId, config, }) {
        const sourcesInChain = this.sources.filter((source) => chainId in source.supportedSpeeds() && (0, requirements_and_support_1.couldSupportMeetRequirements)(source.supportedSpeeds()[chainId], config?.fields));
        if (sourcesInChain.length === 0)
            throw new Error(`Chain with id ${chainId} cannot support the given requirements`);
        const gasResults = sourcesInChain.map((source) => source
            .getGasPrice({ chainId, config })
            .then((response) => failIfResponseDoesNotMeetRequirements(response, config?.fields ?? {})));
        return Promise.any(gasResults);
    }
}
exports.FastestGasPriceSourceCombinator = FastestGasPriceSourceCombinator;
function failIfResponseDoesNotMeetRequirements(response, requirements) {
    if (!(0, requirements_and_support_1.doesResponseMeetRequirements)(response, requirements)) {
        throw new Error('Failed to meet requirements');
    }
    return response;
}
//# sourceMappingURL=fastest-gas-price-source-combinator.js.map