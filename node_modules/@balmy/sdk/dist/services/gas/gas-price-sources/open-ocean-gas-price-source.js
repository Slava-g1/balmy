"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenOceanGasPriceSource = void 0;
const _chains_1 = require("../../../chains");
const SUPPORTED_CHAINS = [
    _chains_1.Chains.ETHEREUM,
    _chains_1.Chains.POLYGON,
    _chains_1.Chains.BNB_CHAIN,
    _chains_1.Chains.FANTOM,
    _chains_1.Chains.AVALANCHE,
    _chains_1.Chains.HECO,
    _chains_1.Chains.OKC,
    _chains_1.Chains.GNOSIS,
    _chains_1.Chains.ARBITRUM,
    _chains_1.Chains.OPTIMISM,
    _chains_1.Chains.CRONOS,
    _chains_1.Chains.MOONRIVER,
    _chains_1.Chains.BOBA,
    _chains_1.Chains.POLYGON_ZKEVM,
    _chains_1.Chains.KAVA,
    _chains_1.Chains.CELO,
    _chains_1.Chains.BASE,
];
class OpenOceanGasPriceSource {
    constructor(fetchService) {
        this.fetchService = fetchService;
    }
    supportedSpeeds() {
        const support = { standard: 'present', fast: 'present', instant: 'present' };
        return Object.fromEntries(SUPPORTED_CHAINS.map(({ chainId }) => [Number(chainId), support]));
    }
    async getGasPrice({ chainId, config, }) {
        const response = await this.fetchService.fetch(`https://ethapi.openocean.finance/v2/${chainId}/gas-price`, { timeout: config?.timeout });
        const body = await response.json();
        const result = typeof body.standard === 'string' || typeof body.standard === 'number'
            ? {
                standard: stringToLegacyGasPrice(body, 'standard'),
                fast: stringToLegacyGasPrice(body, 'fast'),
                instant: stringToLegacyGasPrice(body, 'instant'),
            }
            : {
                standard: toEip1159GasPrice(body, 'standard'),
                fast: toEip1159GasPrice(body, 'fast'),
                instant: toEip1159GasPrice(body, 'instant'),
            };
        return result;
    }
}
exports.OpenOceanGasPriceSource = OpenOceanGasPriceSource;
function toEip1159GasPrice(body, key) {
    const { maxPriorityFeePerGas, maxFeePerGas } = body[key];
    return {
        maxFeePerGas: BigInt(maxFeePerGas),
        maxPriorityFeePerGas: BigInt(maxPriorityFeePerGas),
    };
}
function stringToLegacyGasPrice(body, key) {
    return { gasPrice: BigInt(body[key]) };
}
//# sourceMappingURL=open-ocean-gas-price-source.js.map