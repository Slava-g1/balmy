import { ChainId, FieldsRequirements, TimeString } from '../../../types';
import { GasPriceResult, IGasPriceSource, MergeGasValues } from '../types';
import { ILogsService } from '../../logs';
export type GasPriceAggregationMethod = 'median' | 'min' | 'max';
export declare class AggregatorGasPriceSource<Sources extends IGasPriceSource<object>[] | []> implements IGasPriceSource<MergeGasValues<Sources>> {
    private readonly sources;
    private readonly method;
    private readonly logger;
    constructor(logsService: ILogsService, sources: Sources, method: GasPriceAggregationMethod);
    supportedSpeeds(): Record<number, import("../../../types").SupportInChain<MergeGasValues<Sources>>>;
    getGasPrice<Requirements extends FieldsRequirements<MergeGasValues<Sources>>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            fields?: Requirements;
            timeout?: TimeString;
        };
    }): Promise<GasPriceResult<MergeGasValues<Sources>, Requirements>>;
    private aggregate;
}
