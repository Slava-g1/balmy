import { ChainId, FieldsRequirements, SupportRecord, TimeString } from '../../../types';
import { IGasPriceSource, GasPriceResult, GasValueForVersions } from '../types';
import { IFetchService } from '../../fetch/types';
type GasValues = GasValueForVersions<'standard' | 'fast' | 'instant'>;
export declare class EtherscanGasPriceSource implements IGasPriceSource<GasValues> {
    private readonly fetchService;
    private readonly apiKeys?;
    constructor(fetchService: IFetchService, apiKeys?: Record<number, string> | undefined);
    supportedSpeeds(): {
        [k: string]: SupportRecord<GasValues>;
    };
    getGasPrice<Requirements extends FieldsRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<GasPriceResult<GasValues, Requirements>>;
}
export {};
