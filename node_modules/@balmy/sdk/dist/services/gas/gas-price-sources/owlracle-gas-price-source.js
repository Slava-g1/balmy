"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OwlracleGasPriceSource = void 0;
const _chains_1 = require("../../../chains");
const CHAINS = {
    [_chains_1.Chains.ETHEREUM.chainId]: 'eth',
    [_chains_1.Chains.AVALANCHE.chainId]: 'avax',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'bsc',
    [_chains_1.Chains.POLYGON.chainId]: 'poly',
    [_chains_1.Chains.ARBITRUM.chainId]: 'arb',
    [_chains_1.Chains.OPTIMISM.chainId]: 'opt',
    [_chains_1.Chains.CRONOS.chainId]: 'cro',
    [_chains_1.Chains.FANTOM.chainId]: 'ftm',
    [_chains_1.Chains.AURORA.chainId]: 'aurora',
    [_chains_1.Chains.MOONRIVER.chainId]: 'movr',
    [_chains_1.Chains.HECO.chainId]: 'ht',
    [_chains_1.Chains.CELO.chainId]: 'celo',
    [_chains_1.Chains.HARMONY_SHARD_0.chainId]: 'one',
    [_chains_1.Chains.FUSE.chainId]: 'fuse',
};
const DEFAULT_CONFIG = {
    blocks: 200,
    percentile: 0.3,
    accept: {
        standard: 60,
        fast: 90,
        instant: 95,
    },
};
class OwlracleGasPriceSource {
    constructor(fetchService, apiKey, config) {
        this.fetchService = fetchService;
        this.apiKey = apiKey;
        this.config = { ...DEFAULT_CONFIG, ...config };
    }
    supportedSpeeds() {
        const support = { standard: 'present', fast: 'present', instant: 'present' };
        return Object.fromEntries(Object.keys(CHAINS).map((chainId) => [Number(chainId), support]));
    }
    async getGasPrice({ chainId, config, }) {
        const key = CHAINS[chainId];
        const accept = [this.config.accept.standard, this.config.accept.fast, this.config.accept.instant].join(',');
        const response = await this.fetchService.fetch(`https://api.owlracle.info/v3/${key}/gas` +
            `?apikey=${this.apiKey}` +
            `&reportwei=true` +
            `&feeinusd=false` +
            `&accept=${accept}` +
            `&percentile=${this.config.percentile}` +
            `&blocks=${this.config.blocks}`, { timeout: config?.timeout });
        const { speeds } = await response.json();
        const [standard, fast, instant] = speeds;
        return {
            standard: filterOutExtraData(standard),
            fast: filterOutExtraData(fast),
            instant: filterOutExtraData(instant),
        };
    }
}
exports.OwlracleGasPriceSource = OwlracleGasPriceSource;
function filterOutExtraData(result) {
    return 'maxFeePerGas' in result
        ? { maxFeePerGas: result.maxFeePerGas, maxPriorityFeePerGas: result.maxPriorityFeePerGas }
        : { gasPrice: result.gasPrice };
}
//# sourceMappingURL=owlracle-gas-price-source.js.map