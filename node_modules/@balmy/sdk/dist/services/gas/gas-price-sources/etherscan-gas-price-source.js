"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtherscanGasPriceSource = void 0;
const _chains_1 = require("../../../chains");
const viem_1 = require("viem");
const CHAINS = {
    [_chains_1.Chains.ETHEREUM.chainId]: 'etherscan.io',
    [_chains_1.Chains.POLYGON.chainId]: 'polygonscan.com',
    [_chains_1.Chains.BNB_CHAIN.chainId]: 'bscscan.com',
    [_chains_1.Chains.FANTOM.chainId]: 'ftmscan.com',
};
class EtherscanGasPriceSource {
    constructor(fetchService, apiKeys) {
        this.fetchService = fetchService;
        this.apiKeys = apiKeys;
    }
    supportedSpeeds() {
        const support = { standard: 'present', fast: 'present', instant: 'present' };
        return Object.fromEntries(Object.keys(CHAINS).map((chainId) => [Number(chainId), support]));
    }
    async getGasPrice({ chainId, config, }) {
        let url = `https://api.${CHAINS[chainId]}/api?module=gastracker&action=gasoracle`;
        if (this.apiKeys?.[chainId]) {
            url += `&apikey=${this.apiKeys[chainId]} `;
        }
        const response = await this.fetchService.fetch(url, { timeout: config?.timeout });
        const { result: { SafeGasPrice, ProposeGasPrice, FastGasPrice, suggestBaseFee }, } = await response.json();
        return {
            standard: calculateGas(SafeGasPrice, suggestBaseFee),
            fast: calculateGas(ProposeGasPrice, suggestBaseFee),
            instant: calculateGas(FastGasPrice, suggestBaseFee),
        };
    }
}
exports.EtherscanGasPriceSource = EtherscanGasPriceSource;
function calculateGas(price, baseFee) {
    const gasPrice = (0, viem_1.parseUnits)(price, 9);
    if (!baseFee)
        return { gasPrice };
    const base = (0, viem_1.parseUnits)(baseFee, 9);
    return {
        maxFeePerGas: gasPrice,
        maxPriorityFeePerGas: gasPrice - base,
    };
}
//# sourceMappingURL=etherscan-gas-price-source.js.map