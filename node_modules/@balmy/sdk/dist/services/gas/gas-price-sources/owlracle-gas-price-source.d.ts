import { ChainId, FieldsRequirements, SupportRecord, TimeString } from '../../../types';
import { IGasPriceSource, GasPriceResult, GasValueForVersions } from '../types';
import { IFetchService } from '../../fetch/types';
type GasValues = GasValueForVersions<'standard' | 'fast' | 'instant'>;
export declare class OwlracleGasPriceSource implements IGasPriceSource<GasValues> {
    private readonly fetchService;
    private readonly apiKey;
    private readonly config;
    constructor(fetchService: IFetchService, apiKey: string, config?: Partial<Config>);
    supportedSpeeds(): {
        [k: string]: SupportRecord<GasValues>;
    };
    getGasPrice<Requirements extends FieldsRequirements<GasValues>>({ chainId, config, }: {
        chainId: ChainId;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<GasPriceResult<GasValues, Requirements>>;
}
type Config = {
    blocks: number;
    percentile: number;
    accept: {
        standard: number;
        fast: number;
        instant: number;
    };
};
export {};
