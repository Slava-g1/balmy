"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoUpdateCache = void 0;
const ms_1 = __importDefault(require("ms"));
const DEFAULT_RETRY_TIME = '5Minutes';
class AutoUpdateCache {
    constructor({ calculate, config }) {
        this.calculate = calculate;
        this.config = config;
        this.cache = { lastUpdated: 0, value: undefined };
        const isInvalid = config.valid && config.valid !== 'always' && (0, ms_1.default)(config.valid.onlyFor) <= (0, ms_1.default)(config.update.every);
        if (isInvalid)
            throw new Error(`'onlyFor' must be greater than 'every'`);
        this.update();
    }
    getValue() {
        const now = Date.now();
        const isValid = ({ lastUpdated }) => !this.config.valid || this.config.valid === 'always' || (this.config.valid.onlyFor && lastUpdated >= now - (0, ms_1.default)(this.config.valid.onlyFor));
        return this.cache && isValid(this.cache) ? this.cache.value : undefined;
    }
    async update() {
        try {
            const result = await this.calculate();
            if (result !== undefined) {
                this.cache = { lastUpdated: Date.now(), value: result };
            }
            setTimeout(() => this.update(), (0, ms_1.default)(this.config.update.every));
        }
        catch (error) {
            setTimeout(() => this.update(), (0, ms_1.default)(this.config.update.ifFailsTryAgainIn ?? DEFAULT_RETRY_TIME));
        }
    }
}
exports.AutoUpdateCache = AutoUpdateCache;
//# sourceMappingURL=auto-update-cache.js.map