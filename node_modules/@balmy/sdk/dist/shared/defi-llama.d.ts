import { ChainId, TimeString, TokenAddress, Timestamp } from '../types';
import { IFetchService } from '../services/fetch/types';
import { PriceResult } from '../services/prices';
export declare class DefiLlamaClient {
    private readonly fetch;
    constructor(fetch: IFetchService);
    supportedChains(): ChainId[];
    getCurrentTokenData({ tokens, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
        }[];
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, Required<FetchTokenResult>>>>;
    getHistoricalTokenData({ tokens, timestamp, searchWidth, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
        }[];
        timestamp: Timestamp;
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, Required<FetchTokenResult>>>>;
    getChart({ tokens, span, period, bound, searchWidth, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
        }[];
        span: number;
        period: TimeString;
        bound: {
            from: Timestamp;
        } | {
            upTo: Timestamp | 'now';
        };
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<ChainId, Record<TokenAddress, PriceResult[]>>>;
    getBulkHistoricalTokenData({ tokens, searchWidth, config, }: {
        tokens: {
            chainId: ChainId;
            token: TokenAddress;
            timestamp: Timestamp;
        }[];
        searchWidth?: TimeString;
        config?: {
            timeout?: TimeString;
        };
    }): Promise<Record<number, Record<string, Record<number, PriceResult>>>>;
    getClosestBlock(chainId: ChainId, timestamp: Timestamp): Promise<{
        block: bigint;
        timestamp: any;
    }>;
    private fetchAndMapPrices;
    private fetchAndMapTokens;
    private fetchTokens;
}
export declare function toChainId(key: string): ChainId;
type FetchTokenResult = {
    decimals?: number;
    price: number;
    symbol: string;
    timestamp: number;
    confidence: number;
};
export {};
