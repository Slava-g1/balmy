import { ChainId, FieldRequirementOptions, FieldsRequirements, SupportInChain } from '../types';
export declare function calculateFieldRequirementsPerChain<Values extends object, Requirements extends FieldsRequirements<Values>>(supportRecord: Record<ChainId, SupportInChain<Values>>, requirements: Requirements | undefined): Record<number, Record<keyof Values, FieldRequirementOptions>>;
export declare function calculateFieldRequirements<Values extends object, Requirements extends FieldsRequirements<Values>>(supportRecord: SupportInChain<Values> | undefined, requirements: Requirements | undefined): Record<keyof Values, FieldRequirementOptions>;
export declare function combineSourcesSupport<Source, Values extends object>(sources: Source[], extractSupport: (source: Source) => Record<ChainId, SupportInChain<object>>): Record<ChainId, SupportInChain<Values>>;
export declare function combineSupportInChains<Values extends object>(chainIds: ChainId[], support: Record<ChainId, SupportInChain<object>>): SupportInChain<Values>;
export declare function combineSupportRecords<Values extends object>(supports: SupportInChain<object>[]): SupportInChain<Values>;
/**
 * The idea here is that we'll fail if a field is specified as required, but it's not support at all
 * If the field is optional at least, then we won't fail
 */
export declare function validateRequirements<Values extends object, Requirements extends FieldsRequirements<Values>>(support: Record<ChainId, SupportInChain<Values>>, chains: ChainId[], requirements: Requirements | undefined): void;
export declare function doesResponseMeetRequirements<Values extends object, Requirements extends FieldsRequirements<Values>>(response: Values | undefined, requirements: Requirements | undefined): boolean;
export declare function couldSupportMeetRequirements<Values extends object, Requirements extends FieldsRequirements<Values>>(chainSupport: SupportInChain<Values> | undefined, requirements: Requirements | undefined): boolean;
export declare function makeRequirementsCompatible<Values extends object, Requirements extends FieldsRequirements<Values> | undefined>(supportRecord: Record<ChainId, SupportInChain<Values>>, chains: ChainId[], requirements: Requirements): Requirements;
