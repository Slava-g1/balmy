import { Address, BigIntish, ChainId, TimeString, TokenAddress } from '../types';
export declare function isSameAddress(address1: Address | undefined, address2: Address | undefined): boolean;
export declare function toLower(text: string): Lowercase<string>;
export declare function subtractPercentage(amount: BigIntish, slippagePercentage: number, rounding: 'up' | 'down'): bigint;
export declare function addPercentage(amount: BigIntish, slippagePercentage: number, rounding: 'up' | 'down'): bigint;
export declare function mulDivByNumber(amount: BigIntish, mul: number, div: number, rounding: 'up' | 'down'): bigint;
export declare function calculateDeadline(txValidFor: TimeString): number;
export declare function calculateDeadline(txValidFor: undefined): undefined;
export declare function calculateDeadline(txValidFor: TimeString | undefined): number | undefined;
export declare function timeToSeconds(time: TimeString): number;
export declare function toUnits(amount: BigIntish, decimals: number, precision?: number): string;
export declare function amountToUSD<Price extends number | undefined>(decimals: number, amount: BigIntish, usdPrice: Price, precision?: number): undefined extends Price ? undefined : string;
export declare function filterRejectedResults<T>(promises: Promise<T>[]): Promise<T[]>;
export declare function ruleOfThree({ a, matchA, b }: {
    a: BigIntish;
    matchA: BigIntish;
    b: BigIntish;
}): bigint;
export type TokenInChain = `${ChainId}:${TokenAddress}`;
export declare function toTokenInChain(chainId: ChainId, address: TokenAddress): TokenInChain;
export declare function fromTokenInChain(tokenInChain: TokenAddress): {
    chainId: ChainId;
    address: TokenAddress;
};
export declare function toTrimmedHex(value: BigIntish): string;
export declare function splitInChunks<T>(list: T[], chunkSize: number): T[][];
export declare function toAmountsOfToken({ price, decimals, amount }: {
    price?: number;
    decimals: number;
    amount: BigIntish;
}): {
    amount: bigint;
    amountInUnits: string;
    amountInUSD: undefined;
};
export declare function isBigIntish(value: any): boolean;
export declare function groupByChain<T extends {
    chainId: ChainId;
}, R = Omit<T, 'chainId'>>(elements: T[], map?: (param: Omit<T, 'chainId'>) => R): Record<ChainId, R[]>;
