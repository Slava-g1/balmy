import { IFetchService } from '../../services/fetch/types';
import { IGasService, DefaultGasValues } from '../../services/gas/types';
import { SourceId, SourceMetadata } from '../../services/quotes/types';
import { BaseTokenMetadata, IMetadataService } from '../../services/metadata/types';
import { QuoteService } from '../../services/quotes/quote-service';
import { SourceConfig } from '../../services/quotes/source-registry';
import { IQuoteSourceList } from '../../services/quotes/source-lists/types';
import { ArrayOneOrMore } from '../../utility-types';
import { IProviderService } from '../../services/providers';
import { IPriceService } from '../../services/prices';
import { BatchAPISourceListBuildTxRequest, BatchAPISourceListQuoteRequest, URIGenerator } from '../../services/quotes/source-lists/batch-api-source-list';
export type QuoteSourceListInput = {
    type: 'custom';
    instance: IQuoteSourceList;
} | {
    type: 'local';
} | {
    type: 'batch-api';
    getQuotesURI: URIGenerator<BatchAPISourceListQuoteRequest>;
    buildTxURI: URIGenerator<BatchAPISourceListBuildTxRequest>;
    sources: Record<SourceId, SourceMetadata>;
} | {
    type: 'overridable-source-list';
    lists: {
        default: QuoteSourceListInput;
        getQuotes?: ArrayOneOrMore<{
            list: QuoteSourceListInput;
            sourceIds: SourceId[];
        }>;
        buildTxs?: ArrayOneOrMore<{
            list: QuoteSourceListInput;
            sourceIds: SourceId[];
        }>;
    };
};
export type BuildQuoteParams = {
    sourceList: QuoteSourceListInput;
    defaultConfig?: SourceConfig;
};
export declare function buildQuoteService(params: BuildQuoteParams | undefined, providerService: IProviderService, fetchService: IFetchService, gasService: IGasService<DefaultGasValues>, metadataService: IMetadataService<BaseTokenMetadata>, priceService: IPriceService): QuoteService;
