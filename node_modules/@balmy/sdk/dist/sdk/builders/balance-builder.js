"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildBalanceService = void 0;
const rpc_balance_source_1 = require("../../services/balances/balance-sources/rpc-balance-source");
const balance_service_1 = require("../../services/balances/balance-service");
const cached_balance_source_1 = require("../../services/balances/balance-sources/cached-balance-source");
const fastest_balance_source_1 = require("../../services/balances/balance-sources/fastest-balance-source");
const provider_builder_1 = require("./provider-builder");
function buildBalanceService(params, fetchService, providerService, logsService) {
    const source = buildSource(params?.source, { fetchService, providerService, logsService });
    return new balance_service_1.BalanceService(source);
}
exports.buildBalanceService = buildBalanceService;
function buildSource(source, { fetchService, providerService, logsService }) {
    switch (source?.type) {
        case undefined:
        case 'rpc-multicall':
            const provider = source?.customProvider ? (0, provider_builder_1.buildProviderService)(source.customProvider) : providerService;
            return new rpc_balance_source_1.RPCBalanceSource(provider, logsService, source?.config);
        case 'cached':
            const underlying = buildSource(source.underlyingSource, { fetchService, providerService, logsService });
            return new cached_balance_source_1.CachedBalanceSource(underlying, source.config);
        case 'custom':
            return source.instance;
        case 'fastest':
            return new fastest_balance_source_1.FastestBalanceSource(source.sources.map((source) => buildSource(source, { fetchService, providerService, logsService })), logsService);
    }
}
//# sourceMappingURL=balance-builder.js.map