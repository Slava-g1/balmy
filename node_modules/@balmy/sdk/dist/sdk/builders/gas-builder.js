"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildGasService = void 0;
const fastest_gas_price_source_combinator_1 = require("../../services/gas/gas-price-sources/fastest-gas-price-source-combinator");
const open_ocean_gas_price_source_1 = require("../../services/gas/gas-price-sources/open-ocean-gas-price-source");
const prioritized_gas_price_source_combinator_1 = require("../../services/gas/gas-price-sources/prioritized-gas-price-source-combinator");
const rpc_gas_price_source_1 = require("../../services/gas/gas-price-sources/rpc-gas-price-source");
const gas_service_1 = require("../../services/gas/gas-service");
const owlracle_gas_price_source_1 = require("../../services/gas/gas-price-sources/owlracle-gas-price-source");
const etherscan_gas_price_source_1 = require("../../services/gas/gas-price-sources/etherscan-gas-price-source");
const polygon_gas_station_gas_price_source_1 = require("../../services/gas/gas-price-sources/polygon-gas-station-gas-price-source");
const aggregator_gas_price_source_1 = require("../../services/gas/gas-price-sources/aggregator-gas-price-source");
const paraswap_gas_price_source_1 = require("../../services/gas/gas-price-sources/paraswap-gas-price-source");
const cached_gas_price_source_1 = require("../../services/gas/gas-price-sources/cached-gas-price-source");
function buildGasService(params, logsService, fetchService, providerService) {
    const sourceInput = params?.source?.type === 'cached' ? params.source.underlyingSource : params?.source;
    const gasPriceSource = buildSource(sourceInput, { logsService, fetchService, providerService });
    return new gas_service_1.GasService({ providerService, gasPriceSource });
}
exports.buildGasService = buildGasService;
function buildSource(source, { logsService, providerService, fetchService }) {
    switch (source?.type) {
        case undefined:
            return new aggregator_gas_price_source_1.AggregatorGasPriceSource(logsService, calculatePublicSources({ fetchService, providerService }), 'median');
        case 'open-ocean':
            return new open_ocean_gas_price_source_1.OpenOceanGasPriceSource(fetchService);
        case 'cached':
            const underlying = buildSource(source.underlyingSource, { logsService, fetchService, providerService });
            return new cached_gas_price_source_1.CachedGasPriceSource({
                underlying,
                expiration: { default: source.config.expiration, overrides: source.config.expiration.overrides },
                maxSize: source.config.maxSize,
            });
        case 'paraswap':
            return new paraswap_gas_price_source_1.ParaswapGasPriceSource(fetchService);
        case 'rpc':
            return new rpc_gas_price_source_1.RPCGasPriceSource(providerService);
        case 'polygon-gas-station':
            return new polygon_gas_station_gas_price_source_1.PolygonGasStationGasPriceSource(fetchService);
        case 'etherscan':
            return new etherscan_gas_price_source_1.EtherscanGasPriceSource(fetchService, source.keys);
        case 'owlracle':
            return new owlracle_gas_price_source_1.OwlracleGasPriceSource(fetchService, source.key);
        case 'custom':
            return source.instance;
        case 'aggregate':
            return new aggregator_gas_price_source_1.AggregatorGasPriceSource(logsService, calculateSources(source.sources, { fetchService, providerService, logsService }), source.by);
        case 'fastest':
            return new fastest_gas_price_source_combinator_1.FastestGasPriceSourceCombinator(calculateSources(source.sources, { fetchService, providerService, logsService }));
        case 'prioritized':
            return new prioritized_gas_price_source_combinator_1.PrioritizedGasPriceSourceCombinator(source.sources.map((source) => buildSource(source, { logsService, fetchService, providerService })));
    }
}
function calculateSources(sources, { providerService, fetchService, logsService }) {
    return sources.map((source) => buildSource(source, { logsService, fetchService, providerService }));
}
function calculatePublicSources({ providerService, fetchService, }) {
    const openOcean = new open_ocean_gas_price_source_1.OpenOceanGasPriceSource(fetchService);
    const rpc = new rpc_gas_price_source_1.RPCGasPriceSource(providerService);
    const polygonGasStation = new polygon_gas_station_gas_price_source_1.PolygonGasStationGasPriceSource(fetchService);
    const etherscan = new etherscan_gas_price_source_1.EtherscanGasPriceSource(fetchService);
    const paraswap = new paraswap_gas_price_source_1.ParaswapGasPriceSource(fetchService);
    return [openOcean, rpc, polygonGasStation, etherscan, paraswap];
}
//# sourceMappingURL=gas-builder.js.map