"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildQuoteService = void 0;
const local_source_list_1 = require("../../services/quotes/source-lists/local-source-list");
const quote_service_1 = require("../../services/quotes/quote-service");
const overridable_source_list_1 = require("../../services/quotes/source-lists/overridable-source-list");
const batch_api_source_list_1 = require("../../services/quotes/source-lists/batch-api-source-list");
function buildQuoteService(params, providerService, fetchService, gasService, metadataService, priceService) {
    const sourceList = buildList(params?.sourceList, { providerService, fetchService });
    return new quote_service_1.QuoteService({
        priceService,
        gasService,
        metadataService,
        sourceList,
        defaultConfig: {
            global: addReferrerIfNotSet(params?.defaultConfig?.global),
            custom: params?.defaultConfig?.custom,
        },
    });
}
exports.buildQuoteService = buildQuoteService;
function buildList(list, { providerService, fetchService, }) {
    switch (list?.type) {
        case 'custom':
            return list.instance;
        case 'local':
        case undefined:
            return new local_source_list_1.LocalSourceList({
                providerService,
                fetchService,
            });
        case 'batch-api':
            return new batch_api_source_list_1.BatchAPISourceList({ fetchService, ...list });
        case 'overridable-source-list':
            const defaultList = buildList(list.lists.default, { providerService, fetchService });
            const getQuotesOverrides = list.lists.getQuotes?.map(({ list, sourceIds }) => ({
                list: buildList(list, { providerService, fetchService }),
                sourceIds,
            }));
            const buildTxsOverrides = list.lists.buildTxs?.map(({ list, sourceIds }) => ({
                list: buildList(list, { providerService, fetchService }),
                sourceIds,
            }));
            return new overridable_source_list_1.OverridableSourceList({ default: defaultList, overrides: { getQuotes: getQuotesOverrides, buildTxs: buildTxsOverrides } });
    }
}
// If no referrer address was set, then we will use Balmy's address
function addReferrerIfNotSet(config) {
    return { referrer: { address: '0x1a00e1E311009E56e3b0B9Ed6F86f5Ce128a1C01', name: 'Balmy' }, ...config };
}
//# sourceMappingURL=quote-builder.js.map