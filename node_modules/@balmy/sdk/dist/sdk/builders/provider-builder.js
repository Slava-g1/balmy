"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProviderService = void 0;
const public_rpcs_provider_1 = require("../../services/providers/provider-sources/public-rpcs-provider");
const fallback_provider_1 = require("../../services/providers/provider-sources/fallback-provider");
const load_balance_provider_1 = require("../../services/providers/provider-sources/load-balance-provider");
const prioritized_provider_source_combinator_1 = require("../../services/providers/provider-sources/prioritized-provider-source-combinator");
const infura_provider_1 = require("../../services/providers/provider-sources/infura-provider");
const http_provider_1 = require("../../services/providers/provider-sources/http-provider");
const llama_nodes_provider_1 = require("../../services/providers/provider-sources/llama-nodes-provider");
const web_sockets_provider_1 = require("../../services/providers/provider-sources/web-sockets-provider");
const provider_service_1 = require("../../services/providers/provider-service");
const node_real_provider_1 = require("../../services/providers/provider-sources/node-real-provider");
const get_block_provider_1 = require("../../services/providers/provider-sources/get-block-provider");
const ankr_provider_1 = require("../../services/providers/provider-sources/ankr-provider");
const tenderly_provider_1 = require("../../services/providers/provider-sources/tenderly-provider");
const drpc_provider_1 = require("../../services/providers/provider-sources/drpc-provider");
const blast_provider_1 = require("../../services/providers/provider-sources/blast-provider");
const on_finality_provider_1 = require("../../services/providers/provider-sources/on-finality-provider");
const one_rpc_provider_1 = require("../../services/providers/provider-sources/one-rpc-provider");
const alchemy_provider_1 = require("../../services/providers/provider-sources/alchemy-provider");
const moralis_provider_1 = require("../../services/providers/provider-sources/moralis-provider");
const third_web_provider_1 = require("../../services/providers/provider-sources/third-web-provider");
function buildProviderService(params) {
    const source = buildSource(params?.source);
    return new provider_service_1.ProviderService(source);
}
exports.buildProviderService = buildProviderService;
function buildSource(source) {
    switch (source?.type) {
        case undefined:
            return new public_rpcs_provider_1.PublicRPCsProviderSource();
        case 'custom':
            return source.instance;
        case 'public-rpcs':
            return new public_rpcs_provider_1.PublicRPCsProviderSource({ publicRPCs: source.rpcsPerChain, config: source.config });
        case 'moralis':
            return new moralis_provider_1.MoralisProviderSource(source);
        case 'dRPC':
            return new drpc_provider_1.dRPCProviderSource(source.key, source.onChains);
        case 'third-web':
            return new third_web_provider_1.ThirdWebProviderSource(source.onChains);
        case 'alchemy':
            return new alchemy_provider_1.AlchemyProviderSource(source.key, source.onChains);
        case 'blast':
            return new blast_provider_1.BlastProviderSource(source.key, source.onChains);
        case '1rpc':
            return new one_rpc_provider_1.OneRPCProviderSource(source.key, source.onChains);
        case 'llama-nodes':
            return new llama_nodes_provider_1.LlamaNodesProviderSource(source.key, source.onChains);
        case 'ankr':
            return new ankr_provider_1.AnkrProviderSource(source.key, source.onChains);
        case 'on-finality':
            return new on_finality_provider_1.OnFinalityProviderSource(source.key, source.onChains);
        case 'tenderly':
            return new tenderly_provider_1.TenderlyProviderSource(source.key, source.onChains);
        case 'infura':
            return new infura_provider_1.InfuraProviderSource(source.key, source.onChains);
        case 'node-real':
            return new node_real_provider_1.NodeRealProviderSource(source.key, source.onChains);
        case 'get-block':
            return new get_block_provider_1.GetBlockProviderSource(source.accessTokens);
        case 'http':
            return new http_provider_1.HttpProviderSource(source.url, source.supportedChains);
        case 'web-socket':
            return new web_sockets_provider_1.WebSocketProviderSource(source.url, source.supportedChains);
        case 'fallback':
            return new fallback_provider_1.FallbackProviderSource(source.sources.map(buildSource), source.config);
        case 'load-balance':
            return new load_balance_provider_1.LoadBalanceProviderSource(source.sources.map(buildSource), source.config);
        case 'prioritized':
            return new prioritized_provider_source_combinator_1.PrioritizedProviderSourceCombinator(source.sources.map(buildSource));
    }
}
//# sourceMappingURL=provider-builder.js.map