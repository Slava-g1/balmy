import { ChainId } from '../../types';
import { ExpirationConfigOptions } from '../../shared/concurrent-lru-cache';
import { IFetchService } from '../../services/fetch/types';
import { IProviderService } from '../../services/providers/types';
import { ExtractGasValues, IGasPriceSource, IGasService } from '../../services/gas/types';
import { FastestGasPriceSourceCombinator } from '../../services/gas/gas-price-sources/fastest-gas-price-source-combinator';
import { OpenOceanGasPriceSource } from '../../services/gas/gas-price-sources/open-ocean-gas-price-source';
import { PrioritizedGasPriceSourceCombinator } from '../../services/gas/gas-price-sources/prioritized-gas-price-source-combinator';
import { RPCGasPriceSource } from '../../services/gas/gas-price-sources/rpc-gas-price-source';
import { OwlracleGasPriceSource } from '../../services/gas/gas-price-sources/owlracle-gas-price-source';
import { EtherscanGasPriceSource } from '../../services/gas/gas-price-sources/etherscan-gas-price-source';
import { PolygonGasStationGasPriceSource } from '../../services/gas/gas-price-sources/polygon-gas-station-gas-price-source';
import { AggregatorGasPriceSource, GasPriceAggregationMethod } from '../../services/gas/gas-price-sources/aggregator-gas-price-source';
import { ParaswapGasPriceSource } from '../../services/gas/gas-price-sources/paraswap-gas-price-source';
import { ILogsService } from '../../services/logs';
type CachelessInput = Exclude<GasSourceInput, {
    type: 'cached';
}>;
type SingleSourceInput = Exclude<CachelessInput, {
    type: 'fastest';
} | {
    type: 'aggregate';
} | {
    type: 'prioritized';
}>;
export type GasSourceInput = {
    type: 'open-ocean';
} | {
    type: 'paraswap';
} | {
    type: 'rpc';
} | {
    type: 'polygon-gas-station';
} | {
    type: 'cached';
    underlyingSource: CachelessInput;
    config: {
        expiration: ExpirationConfigOptions & {
            overrides?: Record<ChainId, ExpirationConfigOptions>;
        };
        maxSize?: number;
    };
} | {
    type: 'owlracle';
    key: string;
} | {
    type: 'etherscan';
    keys?: Record<ChainId, string>;
} | {
    type: 'custom';
    instance: IGasPriceSource<any>;
} | {
    type: 'fastest';
    sources: SingleSourceInput[];
} | {
    type: 'aggregate';
    sources: SingleSourceInput[];
    by: GasPriceAggregationMethod;
} | {
    type: 'prioritized';
    sources: SingleSourceInput[];
};
export type BuildGasParams = {
    source: GasSourceInput;
};
export type CalculateGasValuesFromSourceParams<Params extends BuildGasParams | undefined> = ExtractGasValues<CalculateSourceFromParams<Params>>;
type CalculateSourceFromParams<T extends BuildGasParams | undefined> = T extends BuildGasParams ? CalculateSourceFromInput<T['source']> : CalculateSourceFromInput<undefined>;
type CalculateSourceFromInput<Input extends GasSourceInput | undefined> = undefined extends Input ? AggregatorGasPriceSource<PublicSources> : Input extends {
    type: 'open-ocean';
} ? OpenOceanGasPriceSource : Input extends {
    type: 'paraswap';
} ? ParaswapGasPriceSource : Input extends {
    type: 'rpc';
} ? RPCGasPriceSource : Input extends {
    type: 'polygon-gas-station';
} ? PolygonGasStationGasPriceSource : Input extends {
    type: 'owlracle';
} ? OwlracleGasPriceSource : Input extends {
    type: 'etherscan';
} ? EtherscanGasPriceSource : Input extends {
    type: 'custom';
} ? Input['instance'] : Input extends {
    type: 'cached';
} ? CalculateSourceFromInput<Input['underlyingSource']> : Input extends {
    type: 'fastest';
} ? FastestGasPriceSourceCombinator<SourcesFromArray<Input['sources']>> : Input extends {
    type: 'aggregate';
} ? AggregatorGasPriceSource<SourcesFromArray<Input['sources']>> : Input extends {
    type: 'prioritized';
} ? PrioritizedGasPriceSourceCombinator<SourcesFromArray<Input['sources']>> : never;
type SourcesFromArray<Inputs extends SingleSourceInput[]> = Inputs extends SingleSourceInput[] ? {
    [K in keyof Inputs]: Inputs[K] extends GasSourceInput ? CalculateSourceFromInput<Inputs[K]> : Inputs[K];
} : Inputs;
export declare function buildGasService<Params extends BuildGasParams | undefined>(params: Params, logsService: ILogsService, fetchService: IFetchService, providerService: IProviderService): IGasService<ExtractGasValues<CalculateSourceFromParams<Params>>>;
type PublicSources = [
    OpenOceanGasPriceSource,
    RPCGasPriceSource,
    PolygonGasStationGasPriceSource,
    EtherscanGasPriceSource,
    ParaswapGasPriceSource
];
export {};
