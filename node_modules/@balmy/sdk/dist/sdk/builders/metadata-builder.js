"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMetadataService = void 0;
const defi_llama_metadata_source_1 = require("../../services/metadata/metadata-sources/defi-llama-metadata-source");
const metadata_service_1 = require("../../services/metadata/metadata-service");
const rpc_metadata_source_1 = require("../../services/metadata/metadata-sources/rpc-metadata-source");
const cached_metadata_source_1 = require("../../services/metadata/metadata-sources/cached-metadata-source");
const fallback_metadata_source_1 = require("../../services/metadata/metadata-sources/fallback-metadata-source");
function buildMetadataService(params, fetchService, providerService) {
    const source = buildSource(params?.source, { fetchService, providerService });
    return new metadata_service_1.MetadataService(source);
}
exports.buildMetadataService = buildMetadataService;
function buildSource(source, { fetchService, providerService }) {
    switch (source?.type) {
        case undefined:
            const defiLlama = new defi_llama_metadata_source_1.DefiLlamaMetadataSource(fetchService);
            const rpc = new rpc_metadata_source_1.RPCMetadataSource(providerService);
            return new fallback_metadata_source_1.FallbackMetadataSource([defiLlama, rpc]);
        case 'defi-llama':
            return new defi_llama_metadata_source_1.DefiLlamaMetadataSource(fetchService);
        case 'cached':
            const underlying = buildSource(source.underlyingSource, { fetchService, providerService });
            return new cached_metadata_source_1.CachedMetadataSource(underlying, source.config);
        case 'rpc-multicall':
            return new rpc_metadata_source_1.RPCMetadataSource(providerService);
        case 'custom':
            return source.instance;
        case 'aggregate':
            return new fallback_metadata_source_1.FallbackMetadataSource(source.sources.map((source) => buildSource(source, { fetchService, providerService })));
    }
}
//# sourceMappingURL=metadata-builder.js.map