import { ChainId } from '../../types';
import { IProviderSource } from '../../services/providers/types';
import { PublicRPCsProviderSourceConfig } from '../../services/providers/provider-sources/public-rpcs-provider';
import { FallbackProviderSourceConfig } from '../../services/providers/provider-sources/fallback-provider';
import { LoadBalanceProviderSourceConfig } from '../../services/providers/provider-sources/load-balance-provider';
import { ProviderService } from '../../services/providers/provider-service';
export type BuildProviderParams = {
    source: ProviderSourceInput;
};
export type ProviderSourceInput = {
    type: 'custom';
    instance: IProviderSource;
} | {
    type: 'public-rpcs';
    rpcsPerChain?: Record<ChainId, string[]>;
    config?: PublicRPCsProviderSourceConfig;
} | {
    type: 'infura';
    key: string;
    onChains?: ChainId[];
} | {
    type: 'node-real';
    key: string;
    onChains?: ChainId[];
} | {
    type: 'dRPC';
    key: string;
    onChains?: ChainId[];
} | {
    type: 'alchemy';
    key: string;
    onChains?: ChainId[] | 'free tier' | 'paid tier';
} | {
    type: 'third-web';
    onChains?: ChainId[];
} | {
    type: 'blast';
    key?: string;
    onChains?: ChainId[];
} | ({
    type: 'moralis';
    site?: 'site1' | 'site2';
} & ({
    onChains?: ChainId[];
} | {
    keys: Record<ChainId, string>;
})) | {
    type: '1rpc';
    key?: string;
    onChains?: ChainId[];
} | {
    type: 'get-block';
    accessTokens: Record<ChainId, string>;
} | {
    type: 'llama-nodes';
    key?: string;
    onChains?: ChainId[];
} | {
    type: 'on-finality';
    key?: string;
    onChains?: ChainId[];
} | {
    type: 'ankr';
    key?: string;
    onChains?: ChainId[];
} | {
    type: 'tenderly';
    key?: string;
    onChains?: ChainId[];
} | {
    type: 'http';
    url: string;
    supportedChains: ChainId[];
} | {
    type: 'web-socket';
    url: string;
    supportedChains: ChainId[];
} | {
    type: 'fallback';
    sources: ProviderSourceInput[];
    config?: FallbackProviderSourceConfig;
} | {
    type: 'load-balance';
    sources: ProviderSourceInput[];
    config?: LoadBalanceProviderSourceConfig;
} | {
    type: 'prioritized';
    sources: ProviderSourceInput[];
};
export declare function buildProviderService(params?: BuildProviderParams): ProviderService;
